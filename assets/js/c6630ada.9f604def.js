"use strict";(self.webpackChunkswift_tutorials_cn=self.webpackChunkswift_tutorials_cn||[]).push([[9850],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(r),c=o,g=p["".concat(l,".").concat(c)]||p[c]||d[c]||a;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var m=2;m<a;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},4475:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var n=r(87462),o=(r(67294),r(3905));const a={},i="SIMD-group \u77e9\u9635\u51fd\u6570",s={unversionedId:"metal-shading-language-specification/simd-group-matrix-functions/index",id:"metal-shading-language-specification/simd-group-matrix-functions/index",title:"SIMD-group \u77e9\u9635\u51fd\u6570",description:"SIMD-group \u77e9\u9635\u51fd\u6570\u5728\u5934\u6587\u4ef6 `` \u4e2d\u5b9a\u4e49\u3002",source:"@site/docs/metal-shading-language-specification/simd-group-matrix-functions/index.mdx",sourceDirName:"metal-shading-language-specification/simd-group-matrix-functions",slug:"/metal-shading-language-specification/simd-group-matrix-functions/",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/simd-group-matrix-functions/",draft:!1,editUrl:"https://github.com/zhuanghongji/swift-tutorials-cn/docs/metal-shading-language-specification/simd-group-matrix-functions/index.mdx",tags:[],version:"current",lastUpdatedAt:1694847941,formattedLastUpdatedAt:"2023\u5e749\u670816\u65e5",frontMatter:{},sidebar:"metalshadinglanguagespecificationSidebar",previous:{title:"\u77e9\u9635\u51fd\u6570",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/matrix-functions/"},next:{title:"\u51e0\u4f55\u51fd\u6570",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/geometric-functions/"}},l={},m=[{value:"\u521b\u5efa\u3001\u52a0\u8f7d\u548c\u5b58\u50a8\u77e9\u9635\u5143\u7d20",id:"\u521b\u5efa\u52a0\u8f7d\u548c\u5b58\u50a8\u77e9\u9635\u5143\u7d20",level:2},{value:"\u77e9\u9635\u8fd0\u7b97",id:"\u77e9\u9635\u8fd0\u7b97",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=u("ToBePolishedAfterTranslation"),d=u("OriginalPDF"),c=u("TableView"),g={toc:m},f="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(f,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"simd-group-\u77e9\u9635\u51fd\u6570"},"SIMD-group \u77e9\u9635\u51fd\u6570"),(0,o.kt)(p,{mdxType:"ToBePolishedAfterTranslation"}),(0,o.kt)(d,{title:"6.7 SIMD-group Matrix Functions",mdxType:"OriginalPDF"}),(0,o.kt)("p",null,"SIMD-group \u77e9\u9635\u51fd\u6570\u5728\u5934\u6587\u4ef6 ",(0,o.kt)("inlineCode",{parentName:"p"},"<metal_simdgroup_matrix>")," \u4e2d\u5b9a\u4e49\u3002"),(0,o.kt)("h2",{id:"\u521b\u5efa\u52a0\u8f7d\u548c\u5b58\u50a8\u77e9\u9635\u5143\u7d20"},"\u521b\u5efa\u3001\u52a0\u8f7d\u548c\u5b58\u50a8\u77e9\u9635\u5143\u7d20"),(0,o.kt)("p",null,"Metal Shading Library \u652f\u6301\u4ee5\u4e0b\u51fd\u6570\u6765\u7528\u503c\u521d\u59cb\u5316 SIMD-group \u77e9\u9635\u3001\u4ece\u7ebf\u7a0b\u7ec4\u6216\u8bbe\u5907\u5185\u5b58\u52a0\u8f7d\u6570\u636e\u4ee5\u53ca\u5c06\u6570\u636e\u5b58\u50a8\u5230\u7ebf\u7a0b\u7ec4\u6216\u8bbe\u5907\u5185\u5b58\u3002"),(0,o.kt)(c,{num:"6.9",title:"SIMD-group matrix load and stores",headers:["Functions","Description"],datasList:[["simdgroup_matrix<T,Cols,Rows>(T dval)","Creates a diagonal matrix with the given value."],["simdgroup_matrix<T,Cols,Rows> make_filled_simdgroup_matrix(T value)","Initializes a SIMD-group matrix filled with the given value."],["void simdgroup_load(\n thread simdgroup_matrix<T,Cols,Rows>& d, const threadgroup T *src, \n ulong elements_per_row = Cols, \n ulong2 matrix_origin = 0, \n bool transpose_matrix = false\n )","Loads data from threadgroup memory into a SIMD-group matrix. The elements_per_row parameter indicates the number of elements in the source memory layout."],["void simdgroup_load( \n thread simdgroup_matrix<T,Cols,Rows>& d, \n const device T *src, \n ulong elements_per_row = Cols, \n ulong2 matrix_origin = 0, \n bool transpose_matrix = false\n )","Loads data from device memory into a SIMD-group matrix. The elements_per_row parameter indicates the number of elements in the source memory layout."],["void simdgroup_store( \n thread simdgroup_matrix<T,Cols,Rows> a,\n const threadgroup T *dst,\n ulong elements_per_row = Cols, \n ulong2 matrix_origin = 0, \n bool transpose_matrix = false\n )","Stores data from a SIMD-group matrix into threadgroup memory. The elements_per_row parameter indicates the number of elements in the destination memory layout."],["void simdgroup_store( \n thread simdgroup_matrix<T,Cols,Rows> a, \n const device T *dst, \n ulong elements_per_row = Cols, \n ulong2 matrix_origin = 0, \n bool transpose_matrix = false\n )","Stores data from a SIMD-group matrix into device memory. The elements_per_row parameter indicates the number of elements in the destination memory layout."]],mdxType:"TableView"}),(0,o.kt)("h2",{id:"\u77e9\u9635\u8fd0\u7b97"},"\u77e9\u9635\u8fd0\u7b97"),(0,o.kt)("p",null,"SIMD-group \u77e9\u9635\u652f\u6301\u4e58\u6cd5\u7d2f\u52a0\u548c\u591a\u91cd\u8fd0\u7b97\u3002"),(0,o.kt)(c,{num:"6.10",title:"SIMD-group operations",headers:["Operations","Description"],datasList:[["void simdgroup_multiply_accumulate( \n thread simdgroup_matrix<T,Cols,Rows>& d, \n thread simdgroup_matrix<T,K,Rows>& a, \n thread simdgroup_matrix<T,Cols,K>& b, \n thread simdgroup_matrix<T,Cols,Rows>& c\n )","Returns d = a * b + c"],["void simdgroup_multiply( \n thread simdgroup_matrix<T,Cols,Rows>& d, \n thread simdgroup_matrix<T,K,Rows>& a, \n thread simdgroup_matrix<T,Cols,K>& b)","Returns d = a * b"],["*","Returns a * b"]],mdxType:"TableView"}),(0,o.kt)("p",null,"\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528 SIMD-group \u77e9\u9635\u7684\u793a\u4f8b\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"kernel void float_matmad(device float *pMatA, device float *pMatB\n                         device float *pMatC, device float *pMatR\n) {\n    simdgroup_float8x8 sgMatA;\n    simdgroup_float8x8 sgMatB;\n    simdgroup_float8x8 sgMatC;\n    simdgroup_float8x8 sgMatR;\n\n    simdgroup_load(sgMatA, pMatA);\n    simdgroup_load(sgMatB, pMatB);\n    simdgroup_load(sgMatC, pMatC);\n    simdgroup_multiply_accumulate(sgMatR, sgMatA, sgMatB, sgMatC);\n    simdgroup_store(sgMatR, pMatR);\n}\n")))}h.isMDXComponent=!0}}]);