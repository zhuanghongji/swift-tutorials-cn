"use strict";(self.webpackChunkswift_tutorials_cn=self.webpackChunkswift_tutorials_cn||[]).push([[8432],{64151:(e,t,d)=>{d.r(t),d.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>o,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var n=d(85893),r=d(11151);const i={},s="\u540c\u6b65\u548c SIMD-group \u529f\u80fd",a={id:"metal-shading-language-specification/synchronization-and-simd-group-functions/index",title:"\u540c\u6b65\u548c SIMD-group \u529f\u80fd",description:"\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u4f7f\u7528\u540c\u6b65\u548c SIMD-group \u529f\u80fd\uff1a",source:"@site/docs/metal-shading-language-specification/synchronization-and-simd-group-functions/index.mdx",sourceDirName:"metal-shading-language-specification/synchronization-and-simd-group-functions",slug:"/metal-shading-language-specification/synchronization-and-simd-group-functions/",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/synchronization-and-simd-group-functions/",draft:!1,unlisted:!1,editUrl:"https://github.com/zhuanghongji/swift-tutorials-cn/docs/metal-shading-language-specification/synchronization-and-simd-group-functions/index.mdx",tags:[],version:"current",lastUpdatedAt:1698830538,formattedLastUpdatedAt:"2023\u5e7411\u67081\u65e5",frontMatter:{},sidebar:"metalshadinglanguagespecificationSidebar",previous:{title:"\u51e0\u4f55\u51fd\u6570",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/geometric-functions/"},next:{title:"\u56fe\u5f62\u51fd\u6570",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/graphics-functions/"}},l={},h=[{value:"\u7ebf\u7a0b\u7ec4\u548c SIMD-group \u540c\u6b65\u51fd\u6570",id:"\u7ebf\u7a0b\u7ec4\u548c-simd-group-\u540c\u6b65\u51fd\u6570",level:2},{value:"SIMD-group \u51fd\u6570",id:"simd-group-\u51fd\u6570",level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3},{value:"Quad-group \u51fd\u6570",id:"quad-group-\u51fd\u6570",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components},{OriginalPDF:d,TableView:i,ToBePolishedAfterTranslation:s}=t;return d||u("OriginalPDF",!0),i||u("TableView",!0),s||u("ToBePolishedAfterTranslation",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"\u540c\u6b65\u548c-simd-group-\u529f\u80fd",children:"\u540c\u6b65\u548c SIMD-group \u529f\u80fd"}),"\n",(0,n.jsx)(s,{}),"\n",(0,n.jsx)(d,{title:"6.9 Synchronization and SIMD-group Functions"}),"\n",(0,n.jsx)(t.p,{children:"\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u4f7f\u7528\u540c\u6b65\u548c SIMD-group \u529f\u80fd\uff1a"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"kernel"})," \u51fd\u6570"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"fragment"})," \u51fd\u6570"]}),"\n",(0,n.jsxs)(t.li,{children:["\u5185\u6838\u6216\u7247\u6bb5\u51fd\u6570\u8c03\u7528\u7684 ",(0,n.jsx)(t.code,{children:"visible"})," \u51fd\u6570"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"\u7ebf\u7a0b\u7ec4\u548c-simd-group-\u540c\u6b65\u51fd\u6570",children:"\u7ebf\u7a0b\u7ec4\u548c SIMD-group \u540c\u6b65\u51fd\u6570"}),"\n",(0,n.jsxs)(t.p,{children:["\u5934\u6587\u4ef6 ",(0,n.jsx)(t.code,{children:"<metal_compute>"})," \u5b9a\u4e49\u4e86\u8868 6.12 \u4e2d\u7684\u540c\u6b65\u51fd\u6570\uff0c\u5176\u4e2d\u5217\u51fa\u4e86\u5b83\u652f\u6301\u7684\u7ebf\u7a0b\u7ec4\u548c SIMD-group \u540c\u6b65\u51fd\u6570\u3002"]}),"\n",(0,n.jsx)(i,{num:"6.12",title:"Synchronization compute function in the Metal standard library",headers:["Built-in Threadgroup Function","Description"],datasList:[["void threadgroup_barrier(mem_flags flags)","All threads in a threadgroup executing the kernel, fragment, mesh, or object need to execute this function before any thread can continue execution beyond the threadgroup_barrier."],["void simdgroup_barrier(mem_flags flags) \nmacOS: Since Metal 2. \niOS: Since Metal 1.2.","All threads in a SIMD-group executing the kernel, fragment, mesh, or object need to execute this function before any thread can continue execution beyond the simdgroup_barrier."]]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"barrier \u51fd\u6570"}),"\uff08",(0,n.jsx)(t.code,{children:"threadgroup_barrier"})," \u6216 ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"}),"\uff09\u5145\u5f53\u6267\u884c\u548c\u5185\u5b58\u5c4f\u969c\u3002\u6267\u884c\u5185\u6838\u7684\u7ebf\u7a0b\u7ec4\uff08\u6216 SIMD-group\uff09\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u90fd\u9700\u8981\u9047\u5230 ",(0,n.jsx)(t.code,{children:"threadgroup_barrier"}),"\uff08\u6216 ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"}),"\uff09\u51fd\u6570\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u5982\u679c ",(0,n.jsx)(t.code,{children:"threadgroup_barrier"}),"\uff08\u6216 ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"}),"\uff09\u4f4d\u4e8e\u6761\u4ef6\u8bed\u53e5\u5185\uff0c\u5e76\u4e14\u4efb\u4f55\u7ebf\u7a0b\u8fdb\u5165\u6761\u4ef6\u8bed\u53e5\u5e76\u6267\u884c\u5c4f\u969c\u51fd\u6570\uff0c\u5219\u7ebf\u7a0b\u7ec4\uff08\u6216 SIMD-group\uff09\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u90fd\u9700\u8981\u8f93\u5165\u6761\u4ef6\u5e76\u6267\u884c\u5c4f\u969c\u51fd\u6570\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u5982\u679c ",(0,n.jsx)(t.code,{children:"threadgroup_barrier"}),"\uff08\u6216 ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"}),"\uff09\u4f4d\u4e8e\u5faa\u73af\u5185\uff0c\u5219\u5bf9\u4e8e\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\uff0c\u7ebf\u7a0b\u7ec4\uff08\u6216 SIMD-group\uff09\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u90fd\u9700\u8981\u5728\u4efb\u4f55\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\u8d85\u51fa\u5c4f\u969c\u51fd\u6570\u4e4b\u524d\u6267\u884c\u5c4f\u969c\u51fd\u6570\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"threadgroup_barrier"}),"\uff08\u6216 ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"}),"\uff09\u51fd\u6570\u8fd8\u53ef\u4ee5\u5bf9\u5185\u5b58\u6805\u680f\u8fdb\u884c\u6392\u961f\uff08\u7528\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\uff09\uff0c\u4ee5\u786e\u4fdd\u5bf9\u7ebf\u7a0b\u7ec4\u6216\u8bbe\u5907\u5185\u5b58\u7684\u5185\u5b58\u64cd\u4f5c\u7684\u6b63\u786e\u987a\u5e8f\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u8868 6.13 \u63cf\u8ff0\u4e86 ",(0,n.jsx)(t.code,{children:"threadgroup_barrier"})," \u548c ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"})," \u7684 ",(0,n.jsx)(t.code,{children:"mem_flags"})," \u53c2\u6570\u7684\u4f4d\u5b57\u6bb5\u503c\u3002",(0,n.jsx)(t.code,{children:"mem_flags"})," \u53c2\u6570\u786e\u4fdd\u7ebf\u7a0b\u7ec4\u6216 ",(0,n.jsx)(t.code,{children:"simdgroup"}),"\uff08\u5bf9\u4e8e ",(0,n.jsx)(t.code,{children:"threadgroup_barrier"})," \u6216 ",(0,n.jsx)(t.code,{children:"simdgroup_barrier"}),"\uff09\u4e2d\u7684\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5185\u5b58\u987a\u5e8f\u6b63\u786e\u3002"]}),"\n",(0,n.jsx)(i,{num:"6.13",title:"Memory flag enumeration values for barrier functions",headers:["mem_flags","Description"],datasList:[["mem_none","The flag sets threadgroup_barrier or simdgroup_barrier to only act as an execution barrier and doesn\u2019t apply a Memory fence."],["mem_device","The flag ensures the GPU correctly orders the memory operations to device memory for threads in the threadgroup or simdgroup."],["mem_threadgroup","The flag ensures the GPU correctly orders the memory operations to threadgroup memory for threads in a threadgroup or simdgroup."],["mem_texture \nmacOS: Since Metal 1.2. \niOS: Since Metal 2.","The flag ensures the GPU correctly orders the memory operations to texture memory for threads in a threadgroup or simdgroup for a texture with the read_write access qualifier."],["mem_threadgroup_imageblock","The flag ensures the GPU correctly orders the memory operations to threadgroup imageblock memory for threads in a threadgroup or simdgroup."],["mem_object_data","The flag ensures the GPU correctly orders the memory operations to object_data memory for threads in the threadgroup or simdgroup."]]}),"\n",(0,n.jsx)(t.h2,{id:"simd-group-\u51fd\u6570",children:"SIMD-group \u51fd\u6570"}),"\n",(0,n.jsxs)(t.p,{children:["\u5934\u6587\u4ef6 ",(0,n.jsx)(t.code,{children:"<metal_simdgroup>"})," \u5b9a\u4e49\u5185\u6838\u548c\u7247\u6bb5\u51fd\u6570\u7684 SIMD-group \u51fd\u6570\u3002macOS \u652f\u6301 Metal 2 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u7684 SIMD-group \u51fd\u6570\uff0ciOS \u652f\u6301\u5927\u591a\u6570"]}),"\n",(0,n.jsxs)(t.p,{children:["SIMD-group \u5728 Metal 2.2 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u8d77\u4f5c\u7528\u3002\u8868 6. 14 \u548c\u8868 6. 15 \u5217\u51fa\u4e86 SIMD-group \u51fd\u6570\u53ca\u5176\u5728 iOS \u548c macOS \u4e2d\u7684\u53ef\u7528\u6027\u3002\u8bf7\u53c2\u9605 ",(0,n.jsx)(t.strong,{children:"Metal Feature Set Tables"})," \u4ee5\u786e\u5b9a\u54ea\u4e9b GPU \u652f\u6301\u6bcf\u4e2a\u8868\u3002"]}),"\n",(0,n.jsx)(t.p,{children:"SIMD-group \u51fd\u6570\u5141\u8bb8 SIMD-group \u4e2d\u7684\u7ebf\u7a0b\uff08\u8bf7\u53c2\u9605\u7b2c 4.4.1 \u8282\uff09\u5171\u4eab\u6570\u636e\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u7ebf\u7a0b\u7ec4\u5185\u5b58\u6216\u9700\u8981\u4efb\u4f55\u540c\u6b65\u64cd\u4f5c\uff08\u4f8b\u5982\u5c4f\u969c\uff09\u3002"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"active"})," \u7ebf\u7a0b\u662f\u6b63\u5728\u6267\u884c\u7684\u7ebf\u7a0b\u3002",(0,n.jsx)(t.em,{children:"\u975e\u6d3b\u52a8"})," \u7ebf\u7a0b\u662f ",(0,n.jsx)(t.em,{children:"\u672a"})," \u6267\u884c\u7684\u7ebf\u7a0b\u3002\u4f8b\u5982\uff0c\u7531\u4e8e\u6d41\u63a7\u5236\u6216\u4efb\u52a1\u6ca1\u6709\u8db3\u591f\u7684\u5de5\u4f5c\u6765\u586b\u5145\u7ec4\uff0c\u7ebf\u7a0b\u53ef\u80fd\u4e0d\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002\u7ebf\u7a0b\u53ea\u9700\u4ece SIMD-group \u4e2d\u7684\u53e6\u4e00\u4e2a\u6d3b\u52a8\u7ebf\u7a0b\u8bfb\u53d6\u6570\u636e\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u8f85\u52a9\u7ebf\u7a0b\u4e5f\u53ef\u4ee5\u662f ",(0,n.jsx)(t.em,{children:"active"})," \u548c ",(0,n.jsx)(t.em,{children:"inactive"}),"\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f85\u52a9\u7ebf\u7a0b\u5b8c\u6210\u6267\u884c\uff0c\u5b83\u5c06\u53d8\u4e3a\u975e\u6d3b\u52a8\u8f85\u52a9\u7ebf\u7a0b\u3002SIMD-group \u51fd\u6570\u7684\u8f85\u52a9\u7ebf\u7a0b\u53ef\u4ee5\u662f\u6d3b\u52a8\u7684\u6216\u975e\u6d3b\u52a8\u7684\u3002\u4f7f\u7528 ",(0,n.jsx)(t.code,{children:"simd_is_helper_thread()"})," \uff08\u53c2\u89c1\u8868 6. 14 \uff09\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u4e3a\u8f85\u52a9\u7ebf\u7a0b\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u8868 6.14 \u4f7f\u7528\u5360\u4f4d\u7b26 ",(0,n.jsx)(t.code,{children:"T"})," \u8868\u793a\u4efb\u4f55\u6574\u6570\u6216\u6d6e\u70b9\u7c7b\u578b\u7684\u6807\u91cf\u6216\u5411\u91cf\uff0c\u4f46\u4ee5\u4e0b\u60c5\u51b5\u9664\u5916\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"bool"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"void"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"size_t"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"ptrdiff_t"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["\u5bf9\u4e8e\u6309\u4f4d\u8fd0\u7b97\uff0c",(0,n.jsx)(t.code,{children:"Ti"})," \u9700\u8981\u662f\u6574\u6570\u6807\u91cf\u6216\u5411\u91cf\u3002"]}),"\n",(0,n.jsx)(t.p,{children:"\u6709\u5173\u4f7f\u7528 SIMD-group \u51fd\u6570\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u8868\u540e\u7684 6.9.2.1\u3002"}),"\n",(0,n.jsx)(i,{num:"6.14",title:"SIMD-group permute functions in the Metal standard library",headers:["Built-in SIMD-group Functions","Description"],datasList:[["simd_vote \nsimd_active_threads_mask() \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Returns a simd_vote mask that represents the active threads."],["This function is equivalent to simd_ballot (true)and sets the bits that represent active threads to 1, and inactive Threads to 0.","bool simd_all(bool expr) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2."],["Returns true if all active threads evaluate expr to true.","bool simd_any(bool expr) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2."],["Returns true if at least one active thread evaluates Expr to true.","simd_vote simd_ballot (bool expr) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2."],["Returns a wrapper type \u2014 see the simd_vote example \u2014 around a bitmask of the evaluation of the Boolean expression for all active threads in the SIMD-group for which expr is true. The function sets the bits that correspond to inactive threads to 0.","T simd_broadcast(T data, ushort broadcast_lane_id) \nmacOS: Since Metal 2. \niOS: Since Metal 2.2."],["Broadcasts data from the thread whose SIMD lane ID is equal to broadcast_lane_id. \n\nThe specification doesn\u2019t define the behavior when broadcast_lane_id isn\u2019t a valid SIMD lane ID or isn\u2019t the same for all threads in a SIMD-group.","T simd_broadcast_first(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2."],["Broadcasts data from the first active thread \u2014 the active thread with the smallest index \u2014 in the SIMD-group to all active threads.","bool simd_is_first() \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2."],["Returns true if the current thread is the first active thread \u2014 the active thread with the smallest index \u2014 in the current SIMD-group; otherwise false.","T simd_shuffle(T data, ushort simd_lane_id) \nmacOS: Since Metal 2. \niOS: Since Metal 2.2."],["Returns data from the thread whose SIMD lane ID is simd_lane_id. The simd_lane_id needs to be a valid SIMD lane ID but doesn\u2019t have to be the same for all threads in the SIMD-group.","T simd_shuffle_and_fill_down(T data, T filling_data, ushort delta) \nAll OS: Since Metal 2.4."],["Returns data or filling_data from the thread whose SIMD lane ID is the sum of the caller\u2019s SIMD lane ID and delta. \n\nIf the sum is greater than the SIMD-group size, the function copies values from the lower delta lanes of filling_data into the upper delta lanes of data. \n\nThe value for delta needs to be the same for all threads in a SIMD-group.","T simd_shuffle_and_fill_down(T data, T filling_data, ushort delta, ushort modulo) \nAll OS: Since Metal 2.4."],["Returns data or filling_data for each vector from the thread whose SIMD lane ID is the sum of the caller\u2019s SIMD lane ID and delta. \n\nIf the sum is greater than modulo, the function copies values from the lower delta lanes of filling_data into the upper delta lanes of data.","The value of delta needs to be the same for all threads in a SIMD-group. The modulo parameter defines the vector width that splits the SIMD-group into separate vectors."],["T simd_shuffle_and_fill_up(T data, T filling_data, ushort delta) \nAll OS: Since Metal 2.4.","Returns data or filling_data from the thread whose SIMD lane ID is the difference from the caller\u2019s SIMD lane ID minus delta. If the difference is negative, the operation copies values from the upper delta lanes of filling_data to the lower delta lanes of data. \n\nThe value of delta needs to be the same for all threads in a SIMD-group."],["T simd_shuffle_and_fill_up(T data, T filling_data, ushort delta, ushort modulo) \nAll OS: Since Metal 2.4.","Returns data or filling_data for each vector from the thread whose SIMD lane ID is the difference from the caller\u2019s SIMD lane ID minus delta. \n\nIf the difference is negative, the operation copies values from the upper delta lanes of filling_data to the lower delta lanes of data. \n\nThe value of delta needs to be the same for all threads in a SIMD-group. \n\nThe modulo parameter defines the vector width that splits the SIMD-group into separate vectors."],["T simd_shuffle_down(T data, ushort delta) \nmacOS: Since Metal 2. \niOS: Since Metal 2.2.","Returns data from the thread whose SIMD lane ID is the sum of caller\u2019s SIMD lane ID and delta. \n\nThe value for delta needs to be the same for all threads in the SIMD-group. \n\nThis function doesn\u2019t modify the upper delta lanes of data because it doesn\u2019t wrap values around the SIMD-group."],["T simd_shuffle_rotate_down(T data, ushort delta) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Returns data from the thread whose SIMD lane ID is the sum of caller\u2019s SIMD lane ID and delta. \n\nThe value for delta needs to be the same for all threads in the SIMD-group. \n\nThis function wraps values around the SIMD-group."],["T simd_shuffle_rotate_up(T data, ushort delta) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Returns data from the thread whose SIMD lane ID is the difference from the caller\u2019s SIMD lane ID minus delta. \n\nThe value of delta needs to be the same for all threads in a SIMD-group. This function wraps values around the SIMD-group."],["T simd_shuffle_up(T data, ushort delta) \nmacOS: Since Metal 2. \niOS: Since Metal 2.2.","Returns data from the thread whose SIMD lane ID is the difference from the caller\u2019s SIMD lane ID minus delta. \n\nThe value of delta needs to be the same for all threads in a SIMD-group. \n\nThis function doesn\u2019t modify the lower delta lanes of data because it doesn\u2019t wrap values around the SIMD-group."],["Ti simd_shuffle_xor(Ti value, ushort mask) \nmacOS: Since Metal 2. \niOS: Since Metal 2.2.","Returns data from the thread whose SIMD lane ID is equal to the bitwise XOR (^) of the caller\u2019s SIMD lane ID and mask. The value of mask needs to be the same for all threads in a SIMD-group."]]}),"\n",(0,n.jsx)(i,{num:"6.15",title:"SIMD-group reduction functions in the Metal standard library",headers:["Built-in SIMD-group Functions","Description"],datasList:[["Ti simd_and(Ti data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the bitwise AND (&) of data across all active threads in the SIMD-group and broadcasts the result to all active threads in the SIMD-group."],["bool simd_is_helper_thread() \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns true if the current thread is a helper thread; otherwise, false. You needs to call this function from a fragment function or another function that your fragment function calls; otherwise, it may trigger a compile-time error."],["T simd_max(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns data with the highest value from across all active threads in the SIMD-group and broadcasts that value to all active threads in the SIMD-group."],["T simd_min(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns data with the lowest value from across all active threads in the SIMD-group and broadcasts that value to all active threads in the SIMD-group."],["Ti simd_or(Ti data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the bitwise OR (|) of data across all active threads in the SIMD-group and broadcasts the result to all active threads in the SIMD-group."],["T simd_prefix_exclusive_product (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the product of the input values in data for all active threads with a lower index in the SIMD-group. The first thread in the group, returns T(1)."],["T simd_prefix_exclusive_sum (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the sum of the input values in data for all active threads with a lower index in the SIMD-group. The first thread in the group, returns T(0)."],["T simd_prefix_inclusive_product (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the product of the input values in data for all active threads with a lower or the same index in the SIMD-group."],["T simd_prefix_inclusive_sum (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the sum of the input values in data for all active threads with a lower or the same index in the SIMD-group."],["T simd_product(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the product of the input values in data across all active threads in the SIMD-group and broadcasts the result to all active threads in the SIMD-group."],["T simd_sum(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the sum of the input values in data across all active threads in the SIMD-group and broadcasts the result to all active threads in the SIMD-group."],["Ti simd_xor(Ti data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the bitwise XOR (^) of data across all active threads in the SIMD-group and broadcasts the result to all active threads in the SIMD-group."]]}),"\n",(0,n.jsx)(t.h3,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,n.jsx)(t.p,{children:"\u4e3a\u4e86\u6f14\u793a\u968f\u673a\u64ad\u653e\u529f\u80fd\uff0c\u8bf7\u4ece\u8be5 SIMD-group \u7684\u521d\u59cb\u72b6\u6001\u5f00\u59cb\uff1a"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"}),(0,n.jsx)(t.th,{children:"14"}),(0,n.jsx)(t.th,{children:"15"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"i"}),(0,n.jsx)(t.td,{children:"j"}),(0,n.jsx)(t.td,{children:"K"}),(0,n.jsx)(t.td,{children:"l"}),(0,n.jsx)(t.td,{children:"m"}),(0,n.jsx)(t.td,{children:"n"}),(0,n.jsx)(t.td,{children:"o"}),(0,n.jsx)(t.td,{children:"p"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"simd_shuffle_up()"})," \u51fd\u6570\u5c06\u6bcf\u4e2a SIMD-group \u5411\u4e0a\u79fb\u52a8 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u3002\u4f8b\u5982\uff0c\u5f53 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a 2 \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06 SIMD \u901a\u9053 ID \u4e0b\u79fb\u4e24\u4f4d"}),"\n",(0,n.jsx)(t.li,{children:"\u5c06\u4e0b\u9762\u7684\u4e24\u4e2a\u901a\u9053\u6807\u8bb0\u4e3a\u65e0\u6548"}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"-2"}),(0,n.jsx)(t.th,{children:"-1"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"valid"}),(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"i"}),(0,n.jsx)(t.td,{children:"j"}),(0,n.jsx)(t.td,{children:"K"}),(0,n.jsx)(t.td,{children:"l"}),(0,n.jsx)(t.td,{children:"m"}),(0,n.jsx)(t.td,{children:"n"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"simd_shuffle_up()"})," \u51fd\u6570\u662f\u4e00\u79cd\u975e\u5305\u88c5\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u8f83\u4f4e\u7684 ",(0,n.jsx)(t.code,{children:"delta"})," \u901a\u9053\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u7c7b\u4f3c\u5730\uff0c",(0,n.jsx)(t.code,{children:"simd_shuffle_down()"})," \u51fd\u6570\u5c06\u6bcf\u4e2a SIMD-group \u5411\u4e0b\u79fb\u52a8 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u3002\u4ece\u76f8\u540c\u7684\u521d\u59cb SIMD-group \u72b6\u6001\u5f00\u59cb\uff0c",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \uff0c\u8be5\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06 SIMD \u901a\u9053 ID \u5411\u4e0a\u79fb\u52a8\u4e24\u4f4d"}),"\n",(0,n.jsx)(t.li,{children:"\u5c06\u4e0a\u9762\u7684\u4e24\u4e2a\u901a\u9053\u6807\u8bb0\u4e3a\u65e0\u6548"}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"}),(0,n.jsx)(t.th,{children:"14"}),(0,n.jsx)(t.th,{children:"15"}),(0,n.jsx)(t.th,{children:"16"}),(0,n.jsx)(t.th,{children:"17"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"valid"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"i"}),(0,n.jsx)(t.td,{children:"j"}),(0,n.jsx)(t.td,{children:"k"}),(0,n.jsx)(t.td,{children:"l"}),(0,n.jsx)(t.td,{children:"m"}),(0,n.jsx)(t.td,{children:"n"}),(0,n.jsx)(t.td,{children:"o"}),(0,n.jsx)(t.td,{children:"p"}),(0,n.jsx)(t.td,{children:"o"}),(0,n.jsx)(t.td,{children:"p"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"simd_shuffle_down()"})," \u51fd\u6570\u662f\u4e00\u79cd\u975e\u5305\u88c5\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e0a ",(0,n.jsx)(t.code,{children:"delta"})," \u901a\u9053\u3002"]}),"\n",(0,n.jsx)(t.p,{children:"\u4e3a\u4e86\u6f14\u793a shuffle-and-fill \u51fd\u6570\uff0c\u542f\u52a8\u8be5 SIMD-group \u7684\u521d\u59cb\u72b6\u6001\uff1a"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"}),(0,n.jsx)(t.th,{children:"14"}),(0,n.jsx)(t.th,{children:"15"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"s"}),(0,n.jsx)(t.td,{children:"t"}),(0,n.jsx)(t.td,{children:"u"}),(0,n.jsx)(t.td,{children:"v"}),(0,n.jsx)(t.td,{children:"w"}),(0,n.jsx)(t.td,{children:"x"}),(0,n.jsx)(t.td,{children:"y"}),(0,n.jsx)(t.td,{children:"z"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"filling"}),(0,n.jsx)(t.td,{children:"fa"}),(0,n.jsx)(t.td,{children:"fb"}),(0,n.jsx)(t.td,{children:"fc"}),(0,n.jsx)(t.td,{children:"fd"}),(0,n.jsx)(t.td,{children:"fe"}),(0,n.jsx)(t.td,{children:"ff"}),(0,n.jsx)(t.td,{children:"fg"}),(0,n.jsx)(t.td,{children:"fh"}),(0,n.jsx)(t.td,{children:"fs"}),(0,n.jsx)(t.td,{children:"ft"}),(0,n.jsx)(t.td,{children:"fu"}),(0,n.jsx)(t.td,{children:"fv"}),(0,n.jsx)(t.td,{children:"fw"}),(0,n.jsx)(t.td,{children:"fx"}),(0,n.jsx)(t.td,{children:"fy"}),(0,n.jsx)(t.td,{children:"fz"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"simd_shuffle_and_fill_up()"})," \u51fd\u6570\u901a\u8fc7\u589e\u91cf\u7ebf\u7a0b\u5411\u4e0a\u79fb\u52a8\u6bcf\u4e2a SIMD-group\uff08\u7c7b\u4f3c\u4e8e ",(0,n.jsx)(t.code,{children:"simd_shuffle_up()"}),"\uff09\uff0c\u5e76\u901a\u8fc7\u5305\u88c5 SIMD \u901a\u9053 ID \u5c06\u4e0a ",(0,n.jsx)(t.code,{children:"filling"})," \u901a\u9053\u7684\u503c\u5206\u914d\u7ed9\u4e0b ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053\u3002\u4f8b\u5982\uff0c\u5f53 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06 SIMD \u901a\u9053 ID \u4e0b\u79fb\u4e24\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06\u4e0a\u9762\u4e24\u4e2a ",(0,n.jsx)(t.code,{children:"filling"})," \u901a\u9053\u5206\u914d\u7ed9\u4e0b\u9762\u4e24\u4e2a ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"-2"}),(0,n.jsx)(t.th,{children:"-1"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"fy"}),(0,n.jsx)(t.td,{children:"fz"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"s"}),(0,n.jsx)(t.td,{children:"t"}),(0,n.jsx)(t.td,{children:"u"}),(0,n.jsx)(t.td,{children:"v"}),(0,n.jsx)(t.td,{children:"w"}),(0,n.jsx)(t.td,{children:"x"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:["\u5e26\u6709 ",(0,n.jsx)(t.code,{children:"modulo"})," \u53c2\u6570\u7684 ",(0,n.jsx)(t.code,{children:"simd_shuffle_and_fill_up()"})," \u51fd\u6570\u5c06 SIMD-group \u62c6\u5206\u4e3a\u5411\u91cf\uff0c\u6bcf\u4e2a\u5411\u91cf with size ",(0,n.jsx)(t.code,{children:"modulo"}),"\uff0c\u5e76\u6309 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u79fb\u4f4d\u6bcf\u4e2a\u5411\u91cf\u3002\u4f8b\u5982\uff0c",(0,n.jsx)(t.code,{children:"modulo"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"8"})," \u4e14 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06 SIMD \u901a\u9053 ID \u4e0b\u79fb\u4e24\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06 ",(0,n.jsx)(t.code,{children:"filling"})," \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0a\u9762\u4e24\u4e2a\u901a\u9053\u5206\u914d\u7ed9\u6570\u636e\u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0b\u9762\u4e24\u4e2a\u901a\u9053"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"-2"}),(0,n.jsx)(t.th,{children:"-1"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"-2"}),(0,n.jsx)(t.th,{children:"-1"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"fg"}),(0,n.jsx)(t.td,{children:"fh"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"fy"}),(0,n.jsx)(t.td,{children:"fz"}),(0,n.jsx)(t.td,{children:"s"}),(0,n.jsx)(t.td,{children:"t"}),(0,n.jsx)(t.td,{children:"u"}),(0,n.jsx)(t.td,{children:"v"}),(0,n.jsx)(t.td,{children:"w"}),(0,n.jsx)(t.td,{children:"x"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"simd_shuffle_and_fill_down()"})," \u51fd\u6570\u901a\u8fc7 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u5411\u4e0b\u79fb\u52a8\u6bcf\u4e2a SIMD-group\uff08\u7c7b\u4f3c\u4e8e ",(0,n.jsx)(t.code,{children:"simd_shuffle_down()"}),"\uff09\uff0c\u5e76\u901a\u8fc7\u5305\u88c5 SIMD \u901a\u9053 ID \u5c06\u4f4e ",(0,n.jsx)(t.code,{children:"filling"})," \u901a\u9053\u4e2d\u7684\u503c\u5206\u914d\u7ed9\u8f83\u9ad8 ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053\u3002\u4f8b\u5982\uff0c\u5f53 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06 SIMD \u901a\u9053 ID \u4e0a\u79fb\u4e24\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06\u4e0b\u9762\u4e24\u4e2a ",(0,n.jsx)(t.code,{children:"filling"})," \u901a\u9053\u5206\u914d\u7ed9\u4e0a\u9762\u4e24\u4e2a ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"}),(0,n.jsx)(t.th,{children:"14"}),(0,n.jsx)(t.th,{children:"15"}),(0,n.jsx)(t.th,{children:"16"}),(0,n.jsx)(t.th,{children:"17"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"s"}),(0,n.jsx)(t.td,{children:"t"}),(0,n.jsx)(t.td,{children:"u"}),(0,n.jsx)(t.td,{children:"v"}),(0,n.jsx)(t.td,{children:"w"}),(0,n.jsx)(t.td,{children:"x"}),(0,n.jsx)(t.td,{children:"y"}),(0,n.jsx)(t.td,{children:"z"}),(0,n.jsx)(t.td,{children:"fa"}),(0,n.jsx)(t.td,{children:"fb"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:["\u5e26\u6709 ",(0,n.jsx)(t.code,{children:"modulo"})," \u53c2\u6570\u7684 ",(0,n.jsx)(t.code,{children:"simd_shuffle_and_fill_down()"})," \u51fd\u6570\u5c06 SIMD-group \u62c6\u5206\u4e3a\u5411\u91cf\uff0c\u6bcf\u4e2a\u5411\u91cf with size ",(0,n.jsx)(t.code,{children:"modulo"}),"\uff0c\u5e76\u6309 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u79fb\u4f4d\u6bcf\u4e2a\u5411\u91cf\u3002\u4f8b\u5982\uff0c\u6a21\u503c\u4e3a ",(0,n.jsx)(t.code,{children:"8"})," \u4e14 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06 SIMD \u901a\u9053 ID \u5411\u4e0a\u79fb\u52a8\u4e24\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06 ",(0,n.jsx)(t.code,{children:"filling"})," \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0b\u4e24\u4e2a\u6cf3\u9053\u5206\u914d\u7ed9 ",(0,n.jsx)(t.code,{children:"data"})," \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0a\u4e24\u4e2a\u6cf3\u9053"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed SIMD Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"}),(0,n.jsx)(t.th,{children:"6"}),(0,n.jsx)(t.th,{children:"7"}),(0,n.jsx)(t.th,{children:"8"}),(0,n.jsx)(t.th,{children:"9"}),(0,n.jsx)(t.th,{children:"10"}),(0,n.jsx)(t.th,{children:"11"}),(0,n.jsx)(t.th,{children:"12"}),(0,n.jsx)(t.th,{children:"13"}),(0,n.jsx)(t.th,{children:"14"}),(0,n.jsx)(t.th,{children:"15"}),(0,n.jsx)(t.th,{children:"16"}),(0,n.jsx)(t.th,{children:"17"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"e"}),(0,n.jsx)(t.td,{children:"f"}),(0,n.jsx)(t.td,{children:"g"}),(0,n.jsx)(t.td,{children:"h"}),(0,n.jsx)(t.td,{children:"fa"}),(0,n.jsx)(t.td,{children:"fb"}),(0,n.jsx)(t.td,{children:"u"}),(0,n.jsx)(t.td,{children:"v"}),(0,n.jsx)(t.td,{children:"w"}),(0,n.jsx)(t.td,{children:"x"}),(0,n.jsx)(t.td,{children:"y"}),(0,n.jsx)(t.td,{children:"z"}),(0,n.jsx)(t.td,{children:"fs"}),(0,n.jsx)(t.td,{children:"ft"})]})})]}),"\n",(0,n.jsx)(t.p,{children:"\u4e0b\u9762\u662f\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b SIMD \u51fd\u6570\u6267\u884c\u5f52\u7ea6\u64cd\u4f5c\u7684\u793a\u4f8b\uff1a"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"kernel void reduce(const device int *input [[buffer(0)]],\n                   device atomic_int *output [[buffer(1)]],\n                   threadgroup int *ldata [[threadgroup(0)]],\n                   uint gid [[thread_position_in_grid]],\n                   uint lid [[thread_position_in_threadgroup]],\n                   uint lsize [[threads_per_threadgroup]],\n                   uint simd_size [[threads_per_simdgroup]],\n                   uint simd_lane_id [[thread_index_in_simdgroup]],\n                   uint simd_group_id [[simdgroup_index_in_threadgroup]]\n)  {\n    // Perform the first level of reduction.\n    // Read from device memory, write to threadgroup memory. int val = input[gid] + input[gid + lsize];\n    for (uint s=lsize/simd_size; s>simd_size; s/=simd_size) {\n    // Perform per-SIMD partial reduction.\n    for (uint offset=simd_size/2; offset>0; offset/=2)\n    val += simd_shuffle_down(val, offset);\n    // Write per-SIMD partial reduction value to threadgroup memory.\n    if (simd_lane_id == 0)\n    ldata[simd_group_id] = val;\n    // Wait for all partial reductions to complete.\n    threadgroup_barrier(mem_flags::mem_threadgroup);\n\n    val = (lid < s) ? ldata[lid] : 0;\n}\n\n// Perform final per-SIMD partial reduction to calculate\n// the threadgroup partial reduction result.\nfor (uint offset = simd_size / 2; offset > 0; offset /= 2)\n    val += simd_shuffle_down(val, offset);\n\n// Atomically update the reduction result.\nif (lid == 0)\n    atomic_fetch_add_explicit(output, val,\n                              memory_order_relaxed);\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"simd_active_threads_mask"})," \u548c ",(0,n.jsx)(t.code,{children:"simd_ballot"})," \u51fd\u6570\u4f7f\u7528 ",(0,n.jsx)(t.code,{children:"simd_vote"})," \u5305\u88c5\u7c7b\u578b\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u5b83\u53ef\u4ee5\u663e\u5f0f\u8f6c\u6362\u4e3a\u5176\u7531 ",(0,n.jsx)(t.code,{children:"vote_t"})," \u8868\u793a\u7684\u57fa\u7840\u7c7b\u578b\u3002"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"class simd_vote {\npublic:\n    explicit constexpr simd_vote(vote_t v = 0);\n    explicit constexpr operator vote_t() const;\n\n    // Returns true if all bits corresponding to threads in the\n    // SIMD-group are set.\n    // You can use all() with the return value of simd_ballot(expr)   // to determine if all threads Are active.\n    bool all() const;\n\n    // Returns true if any bit corresponding to a valid thread in   // the SIMD-group is set.\n    // You can use any() with the return value of simd_ballot(expr)   // to determine if at least one thread is active.\n    bool any() const;\n\nprivate:\n    // bit i in v represents the 'vote' for the thread in the\n    // SIMD-group at index i\n    uint64_t v;\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["\u8bf7\u6ce8\u610f\uff0c",(0,n.jsx)(t.code,{children:"simd_all(expr)"})," \u4e0e ",(0,n.jsx)(t.code,{children:"simd_ballot(expr).all()"})," \u4e0d\u540c\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\u5982\u679c\u6240\u6709 ",(0,n.jsx)(t.em,{children:"active"})," \u7ebf\u7a0b\u5c06 ",(0,n.jsx)(t.code,{children:"expr"})," \u8ba1\u7b97\u4e3a ",(0,n.jsx)(t.code,{children:"true"}),"\uff0c\u5219 ",(0,n.jsx)(t.code,{children:"simd_all(expr)"})," \u8fd4\u56de ",(0,n.jsx)(t.code,{children:"true"}),"\u3002"]}),"\n",(0,n.jsxs)(t.li,{children:["\u5982\u679c\u6240\u6709\u7ebf\u7a0b ",(0,n.jsx)(t.em,{children:"were"})," \u90fd\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u5e76\u4e14\u5c06 ",(0,n.jsx)(t.code,{children:"expr"})," \u8ba1\u7b97\u4e3a ",(0,n.jsx)(t.code,{children:"true"}),"\uff0c\u5219 ",(0,n.jsx)(t.code,{children:"simd_ballot(expr).all()"})," \u8fd4\u56de ",(0,n.jsx)(t.code,{children:"true"}),"\u3002\uff08",(0,n.jsx)(t.code,{children:"simd_vote::all()"})," \u4e0d\u4f1a\u67e5\u770b\u54ea\u4e9b\u7ebf\u7a0b\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002\uff09"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["\u76f8\u540c\u7684\u903b\u8f91\u9002\u7528\u4e8e ",(0,n.jsx)(t.code,{children:"simd_any"}),"\u3001",(0,n.jsx)(t.code,{children:"simd_vote::any()"})," \u4ee5\u53ca\u7b2c 6.9.3 \u8282\u4e2d\u5217\u51fa\u7684\u7b49\u6548\u56db\u5143\u51fd\u6570\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u5728 SIMD-group \u4e2d\u7ebf\u7a0b\u5c11\u4e8e 64 \u4e2a\u7684\u786c\u4ef6\u4e0a\uff0c",(0,n.jsx)(t.code,{children:"simd_vote"})," \u4e2d\u6700\u9ad8\u4f4d\u7684\u503c\u672a\u5b9a\u4e49\u3002\u7279\u522b\u662f\uff0c\u7531\u4e8e\u4f60\u53ef\u4ee5\u521d\u59cb\u5316\u8fd9\u4e9b\u4f4d\uff0c\u56e0\u6b64\u4e0d\u8981\u5047\u8bbe\u6700\u9ad8\u4f4d\u8bbe\u7f6e\u4e3a 0\u3002"]}),"\n",(0,n.jsx)(t.h2,{id:"quad-group-\u51fd\u6570",children:"Quad-group \u51fd\u6570"}),"\n",(0,n.jsx)(t.p,{children:"macOS\uff1a\u81ea Metal 2.1 \u8d77\u652f\u6301 Quad-group \u51fd\u6570\u3002"}),"\n",(0,n.jsxs)(t.p,{children:["iOS\uff1a\u81ea Metal 2 \u8d77\u652f\u6301\u4e00\u4e9b Quad-group \u51fd\u6570\uff0c\u5305\u62ec ",(0,n.jsx)(t.code,{children:"quad_broadcast"}),"\u3001",(0,n.jsx)(t.code,{children:"quad_shuffle"}),"\u3001",(0,n.jsx)(t.code,{children:"quad_shuffle_up"}),"\u3001",(0,n.jsx)(t.code,{children:"quad_shuffle_down"})," \u548c ",(0,n.jsx)(t.code,{children:"quad_shuffle_xor"}),"\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["Quad-group \u51fd\u6570\u662f\u4e00\u4e2a SIMD-group \u51fd\u6570\uff08\u53c2\u89c1\u7b2c 6.9.2 \u8282\uff09\uff0c\u6267\u884c\u5bbd\u5ea6\u4e3a 4\u3002 ",(0,n.jsx)(t.em,{children:"active"})," \u548c ",(0,n.jsx)(t.em,{children:"inactive"})," \u7ebf\u7a0b\u672f\u8bed\u4e0e\u7b2c 6.9.2 \u8282\u4e2d\u7684\u76f8\u540c\u3002"]}),"\n",(0,n.jsx)(t.p,{children:"\u8f85\u52a9\u7ebf\u7a0b\u4ec5\u6267\u884c\u4ee5\u8ba1\u7b97\u7247\u6bb5\u7740\u8272\u5668\u4e2d Quad-group \u7684\u68af\u5ea6\uff0c\u7136\u540e\u53d8\u4e3a\u975e\u6d3b\u52a8\u72b6\u6001\u3002"}),"\n",(0,n.jsx)(t.p,{children:'\u5185\u6838\u548c\u7247\u6bb5\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u8868 6.16 \u548c\u8868 6.17 \u4e2d\u5217\u51fa\u7684 quad-group \u51fd\u6570\u3002\u7ebf\u7a0b\u53ea\u80fd\u4ece quad-group \u4e2d\u7684\u53e6\u4e00\u4e2a\u6d3b\u52a8\u7ebf\u7a0b\u8bfb\u53d6\u6570\u636e\u3002\u8bf7\u53c2\u9605 "Metal Feature Set Tables" \u4ee5\u786e\u5b9a\u54ea\u4e9b GPU \u652f\u6301\u6bcf\u4e2a\u8868\u3002'}),"\n",(0,n.jsxs)(t.p,{children:["\u8868 6.16 \u548c\u8868 6.17 \u7684\u5360\u4f4d\u7b26 ",(0,n.jsx)(t.code,{children:"T"})," \u8868\u793a\u4efb\u4f55\u6574\u6570\u6216\u6d6e\u70b9\u7c7b\u578b\u7684\u6807\u91cf\u6216\u5411\u91cf\uff0c\u4f46\u4ee5\u4e0b\u60c5\u51b5\u9664\u5916\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"bool"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"void"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"size_t"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"ptrdiff_t"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["\u5bf9\u4e8e\u6309\u4f4d\u8fd0\u7b97\uff0c",(0,n.jsx)(t.code,{children:"T"})," \u9700\u8981\u662f\u6574\u6570\u6807\u91cf\u6216\u5411\u91cf\u3002"]}),"\n",(0,n.jsx)(i,{num:"6.16",title:"Quad-group permute functions in the Metal standard library",headers:["Built-in Quad-group Functions","Description"],datasList:[["quad_vote quad_ballot (bool expr) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Returns a wrapper type \u2014 see the quad_vote example \u2014 around a bitmask of the evaluation of the Boolean expression for all active threads in the quad-group for which expr is true. \n\nThe function sets the bits that correspond to inactive threads to 0."],["T quad_broadcast(T data, ushort broadcast_lane_id) \nmacOS: Since Metal 2. \niOS: Since Metal 2.","Broadcasts data from the thread whose quad lane ID is broadcast_lane_id. The value for broadcast_lane_id needs to be a valid quad lane ID that\u2019s the same for all threads in a quad-group."],["T quad_broadcast_first(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Broadcasts data from the first active thread \u2014 the active thread with the smallest index \u2014 in the quad-group to all active threads."],["T quad_shuffle(T data, ushort quad_lane_id) \nmacOS: Since Metal 2. \niOS: Since Metal 2.","Returns data from the thread whose quad lane ID is the sum of the caller\u2019s quad lane ID and delta. \n\nThe value for quad_lane_id needs to be a valid land ID and may differ from other threads in the quad-group."],["T quad_shuffle_and_fill_down(T data, T filling_data, ushort delta) \nAll OS: Since Metal 2.4.","Returns data or filling_data from the thread whose quad lane ID is the sum of the caller\u2019s quad lane ID and delta. \nIf the sum is greater than the quad-group size, the function copies values from the lower delta lanes of filling_data into the upper delta lanes of data. The value for delta needs to be the same for all threads in a quad-group."],["T quad_shuffle_and_fill_down(T data, T filling_data, ushort delta, ushort modulo) \nAll OS: Since Metal 2.4.","Returns data or filling_data for each vector, from the thread whose quad lane ID is the sum of caller\u2019s quad lane ID and delta. If the sum is greater than the quad-group size, the function copies values from the lower delta lanes of filling_data into the upper delta lanes of data. \n\nThe value of delta needs to be the same for all threads in a quad-group. The modulo parameter defines the vector width that splits the quad-group into separate vectors."],["T quad_shuffle_and_fill_up(T data, T filling_data, ushort delta) \nAll OS: Since Metal 2.4.","Returns data or filling_data from the thread whose quad lane ID is the difference from the caller\u2019s quad lane ID minus delta. If the difference is negative, the operation copies values from the upper delta lanes of filling_data to the lower delta lanes of data. \n\nIf the difference is negative, the function shuffles data from filling_data into the lower delta lanes. The value of delta needs to be the same for all threads in a quad-group."],["T quad_shuffle_and_fill_up(T data, T filling_data, ushort delta, ushort modulo) \nAll OS: Since Metal 2.4.","Returns data or filling_data for each vector from the thread whose quad lane ID is the difference from the caller\u2019s quad lane ID minus delta. \n\nIf the difference is negative, the operation copies values from the upper delta lanes of filling_data to the lower delta lanes of data. \n\nThe value of delta needs to be the same for all threads in a quad-group. \n\nThe modulo parameter defines the width that splits the quad-group into separate vectors."],["T quad_shuffle_down(T data, ushort delta) \nmacOS: Since Metal 2. \niOS: Since Metal 2.","Returns data from the thread whose quad lane ID is the sum of the caller\u2019s quad lane ID and delta. \n\nThe value for delta needs to be the same for all threads in a quad-group. \n\nThe function doesn\u2019t modify the upper delta lanes of data because it doesn\u2019t wrap values around the quad-group."],["T quad_shuffle_rotate_down(T data, ushort delta) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Returns data from the thread whose quad lane ID is the sum of the caller\u2019s quad lane ID and delta. \n\nThe value for delta needs to be the same for all threads in a quad-group. \n\nThis function wraps values around the quad-group."],["T quad_shuffle_rotate_up(T data, ushort delta) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.2.","Returns data from the thread whose quad lane ID is the difference from the caller\u2019s quad lane ID minus delta. \nThe value for delta needs to be the same for all threads in a quad-group. \nThis function wraps values around the quad-group."],["T quad_shuffle_up(T data, ushort delta) \nmacOS: Since Metal 2. \niOS: Since Metal 2.","Returns data from thread whose quad lane ID is the difference from the caller\u2019s quad lane ID minus delta. \n\nThe value for delta needs to be the same for all threads in a quad-group. \n\nThis function doesn\u2019t modify the lower delta lanes of data because it doesn\u2019t wrap values around the quad-group."],["T quad_shuffle_xor(T value, ushort mask) \nmacOS: Since Metal 2. \niOS: Since Metal 2.","Returns data from the thread whose quad lane ID is a bitwise XOR (^) of the caller\u2019s quad lane ID and mask. The value of mask needs to be the same for all threads in a quad-group."]]}),"\n",(0,n.jsx)(i,{num:"6.17",title:"Quad-group reduction functions in the Metal standard library",headers:["Built-in Quad-group Functions","Description"],datasList:[["quad_vote quad_active_threads_mask() \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns a quad_vote mask that represents the active threads. \n\nThe function is equivalent to quad_ballot(true) and sets the bits that represent active threads to 1 and inactive threads to 0."],["bool quad_all(bool expr) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns true if all active threads evaluate expr to true."],["T quad_and(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the bitwise AND (&) of data across all active threads in the quad-group and broadcasts the result to all active threads in the quad-group."],["bool quad_any(bool expr) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns true if at least one active thread evaluates expr to true."],["bool quad_is_first() \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns true if the current thread is the first active thread \u2014 the active thread with the smallest index \u2014 in the current quad-group; otherwise false."],["bool quad_is_helper_thread() \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns true if the current thread is a helper thread; otherwise, false. You needs to call this function from a fragment function or another function that your fragment function calls; otherwise, it may trigger a compile-time error."],["T quad_max(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns data with the highest value from across all active threads in the quad-group and broadcasts that value to all active threads in the quad-group."],["T quad_min(T data) \nmacOS: Since Metal 2.1.\niOS: Since Metal 2.3.","Returns data with the lowest value from across all active threads in the quad-group and broadcasts that value to all active threads in the quad-group."],["T quad_or(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the bitwise OR (|) of data across all active threads in the quad-group and broadcasts the result to all active threads in the quad-group."],["T quad_prefix_exclusive_product (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the product of the input values in data for all active threads with a lower index in the quad-group. For the first thread in the group, return T(1)."],["T quad_prefix_exclusive_sum (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the sum of the input values in data for all active threads with a lower index in the quad-group. For the first thread in the group, return T(0)."],["T quad_prefix_inclusive_product (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the product of the input values in data for all active threads with a lower or the same index in the quad-group."],["T quad_prefix_inclusive_sum (T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","For a given thread, returns the sum of the input values in data for all active threads with a lower or the same index in the quad-group."],["T quad_product(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the product of the input values in data across all active threads in the quad-group and broadcasts the result to all active threads in the quad-group."],["T quad_sum(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the sum of the input values in data across all active threads in the quad-group and broadcasts the result to all active threads in the quad-group."],["T quad_xor(T data) \nmacOS: Since Metal 2.1. \niOS: Since Metal 2.3.","Returns the bitwise XOR (^) of data across all active threads in the quad-group and broadcasts the result to all active threads in the quad-group."]]}),"\n",(0,n.jsx)(t.p,{children:"\u5728 kernel \u51fd\u6570\u4e2d\uff0c\u56db\u8fb9\u5f62\u9664\u4ee5 SIMD-group\u3002\u5728\u7247\u6bb5\u51fd\u6570\u4e2d\uff0c\u901a\u9053 ID \u8868\u793a 2 x 2 \u56db\u8fb9\u5f62\u4e2d\u7684\u7247\u6bb5\u4f4d\u7f6e\uff1a"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u6cf3\u9053 ID 0 \u662f\u5de6\u4e0a\u50cf\u7d20"}),"\n",(0,n.jsx)(t.li,{children:"\u6cf3\u9053 ID 1 \u662f\u53f3\u4e0a\u50cf\u7d20"}),"\n",(0,n.jsx)(t.li,{children:"\u6cf3\u9053 ID 2 \u662f\u5de6\u4e0b\u50cf\u7d20"}),"\n",(0,n.jsx)(t.li,{children:"\u6cf3\u9053 ID 3 \u662f\u53f3\u4e0b\u50cf\u7d20"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"\u4e3a\u4e86\u6f14\u793a\u968f\u673a\u64ad\u653e\u529f\u80fd\uff0c\u8bf7\u4ece\u8be5 quad-group \u7684\u521d\u59cb\u72b6\u6001\u5f00\u59cb\uff1a"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Quad Lane ID"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_shuffle_up()"})," \u51fd\u6570\u5c06\u6bcf\u4e2a Quad-group \u5411\u4e0a\u79fb\u52a8 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u3002\u4f8b\u5982\uff0c\u5f53 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06\u56db\u901a\u9053 ID \u4e0b\u79fb\u4e24\u4f4d"}),"\n",(0,n.jsx)(t.li,{children:"\u5c06\u4e0b\u9762\u7684\u4e24\u4e2a\u901a\u9053\u6807\u8bb0\u4e3a\u65e0\u6548"}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Quad Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"-1"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"valid"}),(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_shuffle_up()"})," \u51fd\u6570\u662f\u4e00\u4e2a\u975e\u5305\u88c5\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u8f83\u4f4e\u7684 ",(0,n.jsx)(t.code,{children:"delta"})," \u901a\u9053\u3002"]}),"\n",(0,n.jsxs)(t.p,{children:["\u7c7b\u4f3c\u5730\uff0c",(0,n.jsx)(t.code,{children:"quad_shuffle_down()"})," \u51fd\u6570\u5c06\u6bcf\u4e2a Quad-group \u5411\u4e0b\u79fb\u52a8 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u3002\u4ece\u76f8\u540c\u7684\u521d\u59cb Quad-group \u72b6\u6001\u5f00\u59cb\uff0c",(0,n.jsx)(t.code,{children:"delta"})," \u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06\u56db\u901a\u9053 ID \u5411\u4e0a\u79fb\u52a8\u4e24\u4f4d"}),"\n",(0,n.jsx)(t.li,{children:"\u5c06\u4e0a\u9762\u7684\u4e24\u4e2a\u901a\u9053\u6807\u8bb0\u4e3a\u65e0\u6548"}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed Quad Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"valid"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:"0"}),(0,n.jsx)(t.td,{children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_shuffle_down()"})," \u51fd\u6570\u662f\u4e00\u4e2a\u975e\u5305\u88c5\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e0a\u90e8 ",(0,n.jsx)(t.code,{children:"delta"})," \u901a\u9053\u3002"]}),"\n",(0,n.jsx)(t.p,{children:"\u4e3a\u4e86\u6f14\u793a shuffle-and-fill \u51fd\u6570\uff0c\u542f\u52a8\u8be5 quad-group \u7684\u521d\u59cb\u72b6\u6001\uff1a"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed Quad Lane ID"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"filling"}),(0,n.jsx)(t.td,{children:"fa"}),(0,n.jsx)(t.td,{children:"fb"}),(0,n.jsx)(t.td,{children:"fc"}),(0,n.jsx)(t.td,{children:"fd"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_shuffle_and_fill_up()"})," \u51fd\u6570\u901a\u8fc7 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u5411\u4e0a\u79fb\u52a8\u6bcf\u4e2a quad-group \u2014 ",(0,n.jsx)(t.code,{children:"\u7c7b\u4f3c\u4e8e quad_shuffle_up()"})," \u2014 \u5e76\u4ece\u4e0a\u5c42\u5206\u914d\u503c\u901a\u8fc7 ",(0,n.jsx)(t.code,{children:"filling"})," \u56db\u901a\u9053 ID \u5c06\u901a\u9053\u586b\u5145\u5230\u8f83\u4f4e\u7684 ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053\u3002\u4f8b\u5982\uff0c\u5f53 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06\u56db\u8f66\u9053 ID \u5411\u4e0b\u79fb\u52a8\u4e24\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06\u4e0a\u4e24\u9053 ",(0,n.jsx)(t.code,{children:"filling"})," \u5206\u914d\u7ed9\u4e0b\u4e24\u9053 ",(0,n.jsx)(t.code,{children:"data"})]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed Quad Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"-1"}),(0,n.jsx)(t.th,{children:"0"}),(0,n.jsx)(t.th,{children:"1"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"fc"}),(0,n.jsx)(t.td,{children:"fd"}),(0,n.jsx)(t.td,{children:"a"}),(0,n.jsx)(t.td,{children:"b"})]})})]}),"\n",(0,n.jsx)(t.p,{children:"\u5e26\u6709\u6a21\u53c2\u6570\u7684 quad_shuffle_and_fill_up()\u51fd\u6570\u5c06 quad-group \u5206\u5272\u6210\u5411\u91cf\uff0c\u6bcf\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u90fd\u4ee5\u6a21\u4e3a\u6a21\uff0c\u5e76\u6309\u589e\u91cf\u7ebf\u7a0b\u79fb\u4f4d\u6bcf\u4e2a\u5411\u91cf\u3002\u4f8b\u5982\uff0c\u6a21\u503c\u4e3a 2 \u4e14\u589e\u91cf\u503c\u4e3a 1 \u65f6\uff0c\u8be5\u51fd\u6570\uff1a"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06\u56db\u901a\u9053 ID \u4e0b\u79fb\u4e00\u4f4d - \u5c06\u586b\u5145\u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0a\u901a\u9053\u5206\u914d\u7ed9\u6570\u636e\u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0b\u901a\u9053"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"\u8ba1\u7b97\u7684\u56db\u901a\u9053 ID - 1 0 - 1 0"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"\u6570\u636e fb a fd c"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_shuffle_and_fill_down()"})," \u51fd\u6570\u901a\u8fc7\u589e\u91cf\u7ebf\u7a0b\u5c06\u6bcf\u4e2a Quad-group \u5411\u4e0b\u79fb\u52a8\uff08\u7c7b\u4f3c\u4e8e ",(0,n.jsx)(t.code,{children:"quad_shuffle_down()"}),"\uff09\uff0c\u5e76\u901a\u8fc7\u5305\u88c5\u56db\u901a\u9053 ID \u5c06\u8f83\u4f4e ",(0,n.jsx)(t.code,{children:"filling"})," \u901a\u9053\u4e2d\u7684\u503c\u5206\u914d\u7ed9\u8f83\u9ad8 ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053\u3002\u4f8b\u5982\uff0c\u5f53 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u65f6\uff0c\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06\u56db\u901a\u9053 ID \u5411\u4e0a\u79fb\u52a8\u4e24\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06\u4e0b\u9762\u4e24\u4e2a ",(0,n.jsx)(t.code,{children:"filling"})," \u901a\u9053\u5206\u914d\u7ed9\u4e0a\u9762\u4e24\u4e2a ",(0,n.jsx)(t.code,{children:"data"})," \u901a\u9053"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed Quad Lane ID"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"3"}),(0,n.jsx)(t.th,{children:"4"}),(0,n.jsx)(t.th,{children:"5"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"c"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"fa"}),(0,n.jsx)(t.td,{children:"fb"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:["\u5e26\u6709\u6a21\u53c2\u6570\u7684 ",(0,n.jsx)(t.code,{children:"quad_shuffle_and_fill_down()"})," \u51fd\u6570\u5c06 quad-group \u5206\u5272\u6210\u5411\u91cf\uff0c\u6bcf\u4e2a\u5411\u91cf with size ",(0,n.jsx)(t.code,{children:"modulo"}),"\uff0c\u5e76\u6309 ",(0,n.jsx)(t.code,{children:"delta"})," \u7ebf\u7a0b\u79fb\u4f4d\u6bcf\u4e2a\u5411\u91cf\u3002\u4f8b\u5982\uff0c",(0,n.jsx)(t.code,{children:"modulo"})," \u4e3a ",(0,n.jsx)(t.code,{children:"2"})," \u4e14 ",(0,n.jsx)(t.code,{children:"delta"})," \u503c\u4e3a ",(0,n.jsx)(t.code,{children:"1"})," \u65f6\uff0c\u8be5\u51fd\u6570\uff1a"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"\u5c06\u56db\u901a\u9053 ID \u4e0a\u79fb\u4e00\u4f4d"}),"\n",(0,n.jsxs)(t.li,{children:["\u5c06 ",(0,n.jsx)(t.code,{children:"filling"})," \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0b\u901a\u9053\u5206\u914d\u7ed9 ",(0,n.jsx)(t.code,{children:"data"})," \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u4e0a\u901a\u9053"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Computed Quad Lane ID"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"}),(0,n.jsx)(t.th,{children:"1"}),(0,n.jsx)(t.th,{children:"2"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"data"}),(0,n.jsx)(t.td,{children:"b"}),(0,n.jsx)(t.td,{children:"fa"}),(0,n.jsx)(t.td,{children:"d"}),(0,n.jsx)(t.td,{children:"fc"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_ballot"})," \u51fd\u6570\u4f7f\u7528 ",(0,n.jsx)(t.code,{children:"quad_vote"})," \u5305\u88c5\u7c7b\u578b\uff0c\u53ef\u4ee5\u663e\u5f0f\u8f6c\u6362\u4e3a\u5176\u57fa\u7840\u7c7b\u578b\u3002\uff08\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u8bf7\u6ce8\u610f\u4f7f\u7528 ",(0,n.jsx)(t.code,{children:"vote_t"})," \u6765\u8868\u793a\u57fa\u7840\u7c7b\u578b ",(0,n.jsx)(t.code,{children:"XXX"}),"\u3002\uff09"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"class quad_vote {\npublic:\n  typedef XXX vote_t;\n  explicit constexpr quad_vote(vote_t v = 0);\n  explicit constexpr operator vote_t() const;\n\n  // Returns true if all bits corresponding to threads in the\n  // quad-group (the four bottom bits) are set.\n  bool all() const;\n\n  // Returns true if any bit corresponding to a thread in the\n  // quad-Group is set.\n  bool any() const;\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"quad_vote"})," \u6784\u9020\u51fd\u6570\u5c4f\u853d\u4e86\u9876\u90e8\u4f4d\uff08\u5373\uff0c\u5e95\u90e8\u56db\u4e2a\u4f4d\u9664\u5916\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u6295\u5c04\u5230 ",(0,n.jsx)(t.code,{children:"vote_t"})," \u65f6\uff0c\u975e\u5e95\u90e8\u56db\u4f4d\u4fdd\u8bc1\u4e0d\u4f1a\u88ab\u8bbe\u7f6e\u3002"]})]})}function o(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(e,t,d)=>{d.d(t,{Z:()=>a,a:()=>s});var n=d(67294);const r={},i=n.createContext(r);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);