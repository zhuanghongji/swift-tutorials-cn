"use strict";(self.webpackChunkswift_tutorials_cn=self.webpackChunkswift_tutorials_cn||[]).push([[7699],{44400:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=n(85893),r=n(11151);const a={},i="ChartPlotContent",c={id:"charts/chart-management/chart-plot-content/index",title:"ChartPlotContent",description:"<OriginalSource",source:"@site/docs/charts/chart-management/chart-plot-content/index.mdx",sourceDirName:"charts/chart-management/chart-plot-content",slug:"/charts/chart-management/chart-plot-content/",permalink:"/swift-tutorials-cn/docs/charts/chart-management/chart-plot-content/",draft:!1,unlisted:!1,editUrl:"https://github.com/zhuanghongji/swift-tutorials-cn/docs/charts/chart-management/chart-plot-content/index.mdx",tags:[],version:"current",lastUpdatedAt:1698830538,formattedLastUpdatedAt:"2023\u5e7411\u67081\u65e5",frontMatter:{},sidebar:"chartsSidebar",previous:{title:"DateBins",permalink:"/swift-tutorials-cn/docs/charts/data-bins/date-bins/"},next:{title:"ChartProxy",permalink:"/swift-tutorials-cn/docs/charts/chart-management/chart-proxy/"}},s={},l=[];function h(t){const e={code:"code",h1:"h1",pre:"pre",...(0,r.a)(),...t.components},{OriginalSource:n,ToBePolishedAfterTranslation:a}=e;return n||p("OriginalSource",!0),a||p("ToBePolishedAfterTranslation",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"chartplotcontent",children:"ChartPlotContent"}),"\n",(0,o.jsx)(a,{}),"\n",(0,o.jsx)(n,{title:"ChartPlotContent",url:"https://developer.apple.com/documentation/charts/chartplotcontent",summary:"\u8868\u793a\u56fe\u8868\u7ed8\u56fe\u533a\u57df\u7684\u89c6\u56fe"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-swift",children:"@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)\npublic struct ChartPlotContent : View {\n\n    /// The content and behavior of the view.\n    ///\n    /// When you implement a custom view, you must implement a computed\n    /// `body` property to provide the content for your view. Return a view\n    /// that's composed of built-in views that SwiftUI provides, plus other\n    /// composite views that you've already defined:\n    ///\n    ///     struct MyView: View {\n    ///         var body: some View {\n    ///             Text(\"Hello, World!\")\n    ///         }\n    ///     }\n    ///\n    /// For more information about composing views and a view hierarchy,\n    /// see <doc:Declaring-a-Custom-View>.\n    @MainActor public var body: some View { get }\n\n    /// The type of view representing the body of this view.\n    ///\n    /// When you create a custom view, Swift infers this type from your\n    /// implementation of the required ``View/body-swift.property`` property.\n    public typealias Body = some View\n}\n"})})]})}function d(t={}){const{wrapper:e}={...(0,r.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(h,{...t})}):h(t)}function p(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(t,e,n)=>{n.d(e,{Z:()=>c,a:()=>i});var o=n(67294);const r={},a=o.createContext(r);function i(t){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),o.createElement(a.Provider,{value:e},t.children)}}}]);