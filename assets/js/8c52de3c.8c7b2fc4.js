"use strict";(self.webpackChunkswift_tutorials_cn=self.webpackChunkswift_tutorials_cn||[]).push([[8565],{3905:(n,t,e)=>{e.d(t,{Zo:()=>s,kt:()=>g});var a=e(67294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function r(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,a,o=function(n,t){if(null==n)return{};var e,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var c=a.createContext({}),u=function(n){var t=a.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):r(r({},t),n)),e},s=function(n){var t=u(n.components);return a.createElement(c.Provider,{value:t},n.children)},p="mdxType",f={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(n,t){var e=n.components,o=n.mdxType,i=n.originalType,c=n.parentName,s=l(n,["components","mdxType","originalType","parentName"]),p=u(e),d=o,g=p["".concat(c,".").concat(d)]||p[d]||f[d]||i;return e?a.createElement(g,r(r({ref:t},s),{},{components:e})):a.createElement(g,r({ref:t},s))}));function g(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var i=e.length,r=new Array(i);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=n,l[p]="string"==typeof n?n:o,r[1]=l;for(var u=2;u<i;u++)r[u]=e[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},97781:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>_,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=e(87462),o=(e(67294),e(3905));const i={},r="\u6253\u5305\u548c\u89e3\u5305\u51fd\u6570",l={unversionedId:"metal-shading-language-specification/pack-and-unpack-functions/index",id:"metal-shading-language-specification/pack-and-unpack-functions/index",title:"\u6253\u5305\u548c\u89e3\u5305\u51fd\u6570",description:"\u672c\u8282\u5217\u51fa\u4e86\u5934\u6587\u4ef6 `` \u4e2d\u5b9a\u4e49\u7684 Metal \u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u5411\u91cf\u6d6e\u70b9\u6570\u636e\u4e0e\u538b\u7f29\u6574\u6570\u503c\u76f8\u4e92\u8f6c\u6362\u3002\u6709\u5173\u5982\u4f55\u4ece 8 \u4f4d\u300110 \u4f4d\u6216 16 \u4f4d\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\u6574\u6570\u503c\u8f6c\u6362\u4e3a\u6807\u51c6\u5316\u5355\u7cbe\u5ea6\u6216\u534a\u7cbe\u5ea6\u6d6e\u70b9\u503c\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b2c 7.7 \u8282\u7684\u5c0f\u8282\u3002",source:"@site/docs/metal-shading-language-specification/pack-and-unpack-functions/index.mdx",sourceDirName:"metal-shading-language-specification/pack-and-unpack-functions",slug:"/metal-shading-language-specification/pack-and-unpack-functions/",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/pack-and-unpack-functions/",draft:!1,editUrl:"https://github.com/zhuanghongji/swift-tutorials-cn/docs/metal-shading-language-specification/pack-and-unpack-functions/index.mdx",tags:[],version:"current",lastUpdatedAt:1698741091,formattedLastUpdatedAt:"2023\u5e7410\u670831\u65e5",frontMatter:{},sidebar:"metalshadinglanguagespecificationSidebar",previous:{title:"\u56fe\u50cf\u5757\u51fd\u6570",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/imageblock-functions/"},next:{title:"\u539f\u5b50\u51fd\u6570",permalink:"/swift-tutorials-cn/docs/metal-shading-language-specification/atomic-functions/"}},c={},u=[{value:"\u89e3\u538b\u6574\u6570\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u5411\u91cf",id:"\u89e3\u538b\u6574\u6570\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u5411\u91cf",level:2},{value:"\u5c06\u6d6e\u70b9\u5411\u91cf\u8f6c\u6362\u4e3a\u6574\u6570\uff0c\u7136\u540e\u6253\u5305\u6574\u6570",id:"\u5c06\u6d6e\u70b9\u5411\u91cf\u8f6c\u6362\u4e3a\u6574\u6570\u7136\u540e\u6253\u5305\u6574\u6570",level:2}],s=n=>function(t){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=s("ToBePolishedAfterTranslation"),f=s("OriginalPDF"),d=s("TableView"),g={toc:u},m="wrapper";function _(n){let{components:t,...e}=n;return(0,o.kt)(m,(0,a.Z)({},g,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6253\u5305\u548c\u89e3\u5305\u51fd\u6570"},"\u6253\u5305\u548c\u89e3\u5305\u51fd\u6570"),(0,o.kt)(p,{mdxType:"ToBePolishedAfterTranslation"}),(0,o.kt)(f,{title:"6.14 Pack and Unpack Functions",mdxType:"OriginalPDF"}),(0,o.kt)("p",null,"\u672c\u8282\u5217\u51fa\u4e86\u5934\u6587\u4ef6 ",(0,o.kt)("inlineCode",{parentName:"p"},"<metal_pack>")," \u4e2d\u5b9a\u4e49\u7684 Metal \u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u5411\u91cf\u6d6e\u70b9\u6570\u636e\u4e0e\u538b\u7f29\u6574\u6570\u503c\u76f8\u4e92\u8f6c\u6362\u3002\u6709\u5173\u5982\u4f55\u4ece 8 \u4f4d\u300110 \u4f4d\u6216 16 \u4f4d\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\u6574\u6570\u503c\u8f6c\u6362\u4e3a\u6807\u51c6\u5316\u5355\u7cbe\u5ea6\u6216\u534a\u7cbe\u5ea6\u6d6e\u70b9\u503c\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7b2c 7.7 \u8282\u7684\u5c0f\u8282\u3002"),(0,o.kt)("h2",{id:"\u89e3\u538b\u6574\u6570\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u5411\u91cf"},"\u89e3\u538b\u6574\u6570\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u5411\u91cf"),(0,o.kt)("p",null,"\u8868 6.22 \u5217\u51fa\u4e86\u4ece\u5355\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u4e2d\u89e3\u5305\u591a\u4e2a\u503c\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u5b58\u50a8\u5728\u5411\u91cf\u4e2d\u7684\u6d6e\u70b9\u503c\u7684\u51fd\u6570\u3002"),(0,o.kt)(d,{num:"6.22",title:"Unpack functions",headers:["Built-in Unpack Functions","Description"],datasList:[["float4 unpack_unorm4x8_to_float(uint x) \nfloat4 unpack_snorm4x8_to_float(uint x) \nhalf4 unpack_unorm4x8_to_half(uint x) \nhalf4 unpack_snorm4x8_to_half(uint x)","Unpack a 32-bit unsigned integer into four 8-bit signed or unsigned integers and then convert each 8-bit signed or unsigned integer value to a normalized single- or half-precision floating-point value to generate a 4-component vector."],["float4 unpack_unorm4x8_srgb_to_float(uint x) \nhalf4 unpack_unorm4x8_srgb_to_half(uint x)","Unpack a 32-bit unsigned integer into four 8-bit signed or unsigned integers and then convert each 8-bit signed or unsigned integer value to a normalized single- or half-precision floating-point value to generate a 4-component vector. The r, g, and b color values are converted from sRGB to linear RGB."],["float2 unpack_unorm2x16_to_float(uint x) \nfloat2 unpack_snorm2x16_to_float(uint x) \nhalf2 unpack_unorm2x16_to_half(uint x) \nhalf2 unpack_snorm2x16_to_half(uint x)","Unpack a 32-bit unsigned integer into two 16-bit signed or unsigned integers and then convert each 16-bit signed or unsigned integer value to a normalized single- or half-precision floating-point value to generate a 2-component vector."],["float4 unpack_unorm10a2_to_float(uint x) \nfloat3 unpack_unorm565_to_float(ushort x) \nhalf4 unpack_unorm10a2_to_half(uint x) \nhalf3 unpack_unorm565_to_half(ushort x)","Convert a 10a2 (1010102) or 565 color value to the corresponding normalized single- or half-precision floating-point vector."]],mdxType:"TableView"}),(0,o.kt)("p",null,"\u5f53\u4ece 16 \u4f4d\u65e0\u7b26\u53f7\u6807\u51c6\u5316\u6216\u6709\u7b26\u53f7\u6807\u51c6\u5316\u503c\u8f6c\u6362\u4e3a\u534a\u7cbe\u5ea6\u6d6e\u70b9\u65f6\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"unpack_unorm2x16_to_half")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"unpack_snorm2x16_to_half")," \u51fd\u6570\u53ef\u80fd\u4f1a\u4e22\u5931\u7cbe\u5ea6\u3002"),(0,o.kt)("h2",{id:"\u5c06\u6d6e\u70b9\u5411\u91cf\u8f6c\u6362\u4e3a\u6574\u6570\u7136\u540e\u6253\u5305\u6574\u6570"},"\u5c06\u6d6e\u70b9\u5411\u91cf\u8f6c\u6362\u4e3a\u6574\u6570\uff0c\u7136\u540e\u6253\u5305\u6574\u6570"),(0,o.kt)("p",null,"\u8868 6.23 \u5217\u51fa\u4e86\u4ee5\u6d6e\u70b9\u5411\u91cf\u5f00\u5934\u3001\u5c06\u7ec4\u4ef6\u8f6c\u6362\u4e3a\u6574\u6570\u503c\u3001\u7136\u540e\u5c06\u591a\u4e2a\u503c\u6253\u5305\u4e3a\u5355\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u7684\u51fd\u6570\u3002"),(0,o.kt)(d,{num:"6.23",title:"Pack functions",headers:["Built-in Pack Functions","Description"],datasList:[["uint pack_float_to_unorm4x8(float4 x) uint pack_float_to_snorm4x8(float4 x) uint pack_half_to_unorm4x8(half4 x) uint pack_half_to_snorm4x8(half4 x)","Convert a four-component vector normalized single- or half-precision floating-point value to four 8-bit integer values and pack these 8-bit integer values into a 32-bit unsigned integer."],["uint pack_float_to_srgb_unorm4x8(float4 x) \nuint pack_half_to_srgb_unorm4x8(half4 x)","Convert a four-component vector normalized single- or half-precision floating-point value to four 8-bit integer values and pack these 8-bit integer values into a 32-bit unsigned integer. The color values are converted from linear RGB to sRGB."],["uint pack_float_to_unorm2x16(float2 x) \nuint pack_float_to_snorm2x16(float2 x) \nuint pack_half_to_unorm2x16(half2 x) \nuint pack_half_to_snorm2x16(half2 x)","Convert a two-component vector of normalized single- or half-precision floating-point values to two 16-bit integer values and pack these 16-bit integer values into a 32-bit unsigned integer."],["uint pack_float_to_unorm10a2(float4) \nushort pack_float_to_unorm565(float3) \nuint pack_half_to_unorm10a2(half4) \nushort pack_half_to_unorm565(half3)","Convert a three- or four-component vector of normalized single- or half- precision floating-point values to a packed, 10a2 (1010102) or 565 color integer value."]],mdxType:"TableView"}))}_.isMDXComponent=!0}}]);