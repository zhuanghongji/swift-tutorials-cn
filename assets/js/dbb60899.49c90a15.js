"use strict";(self.webpackChunkswift_tutorials_cn=self.webpackChunkswift_tutorials_cn||[]).push([[1057],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),o=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=o(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=o(t),d=a,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return t?r.createElement(k,l(l({ref:n},u),{},{components:t})):r.createElement(k,l({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var o=2;o<i;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},11694:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=t(87462),a=(t(67294),t(3905));const i={},l="\u5feb\u901f\u6d4f\u89c8 Swift",s={unversionedId:"swift/welcome/a-swift-tour/index",id:"swift/welcome/a-swift-tour/index",title:"\u5feb\u901f\u6d4f\u89c8 Swift",description:"<OriginalLink",source:"@site/docs/swift/welcome/a-swift-tour/index.mdx",sourceDirName:"swift/welcome/a-swift-tour",slug:"/swift/welcome/a-swift-tour/",permalink:"/swift-tutorials-cn/docs/swift/welcome/a-swift-tour/",draft:!1,editUrl:"https://github.com/zhuanghongji/swift-tutorials-cn/docs/swift/welcome/a-swift-tour/index.mdx",tags:[],version:"current",lastUpdatedAt:1693182484,formattedLastUpdatedAt:"2023\u5e748\u670828\u65e5",frontMatter:{},sidebar:"swiftSidebar",previous:{title:"\u5173\u4e8e Swift",permalink:"/swift-tutorials-cn/docs/swift/welcome/about/"},next:{title:"\u57fa\u7840\u77e5\u8bc6",permalink:"/swift-tutorials-cn/docs/swift/guide/the-basics/"}},p={},o=[{value:"\u7b80\u5355\u503c",id:"\u7b80\u5355\u503c",level:2},{value:"\u63a7\u5236\u6d41",id:"\u63a7\u5236\u6d41",level:2},{value:"\u51fd\u6570\u548c\u95ed\u5305",id:"\u51fd\u6570\u548c\u95ed\u5305",level:2},{value:"\u5bf9\u8c61\u548c\u7c7b",id:"\u5bf9\u8c61\u548c\u7c7b",level:2},{value:"\u679a\u4e3e\u548c\u7ed3\u6784",id:"\u679a\u4e3e\u548c\u7ed3\u6784",level:2},{value:"\u5e76\u53d1",id:"\u5e76\u53d1",level:2},{value:"\u534f\u8bae\u548c\u6269\u5c55",id:"\u534f\u8bae\u548c\u6269\u5c55",level:2},{value:"\u9519\u8bef\u5904\u7406",id:"\u9519\u8bef\u5904\u7406",level:2},{value:"\u6cdb\u578b",id:"\u6cdb\u578b",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},c=u("OriginalLink"),m=u("ExperimentBlock"),d={toc:o},k="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(k,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u5feb\u901f\u6d4f\u89c8-swift"},"\u5feb\u901f\u6d4f\u89c8 Swift"),(0,a.kt)(c,{title:"\u63a2\u7d22 Swift \u7684\u7279\u6027\u548c\u8bed\u6cd5",value:"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/guidedtour",mdxType:"OriginalLink"}),(0,a.kt)("p",null,'\u4f20\u7edf\u4e0a\u5efa\u8bae\uff0c\u65b0\u8bed\u8a00\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5e94\u8be5\u5728\u5c4f\u5e55\u4e0a\u6253\u5370 "Hello\uff0cworld!" \u7684\u5b57\u6837\u3002\u5728 Swift \u4e2d\uff0c\u8fd9\u53ef\u4ee5\u5728\u4e00\u884c\u4e2d\u5b8c\u6210\uff1a'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'print("Hello, world!")\n\n// tip-next-line\n// Prints "Hello, world!"\n')),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u7528 C \u6216 Objective-C \u7f16\u5199\u8fc7\u4ee3\u7801\uff0c\u4f60\u4f1a\u89c9\u5f97\u8fd9\u79cd\u8bed\u6cd5\u5f88\u719f\u6089\u3002\u5728 Swift \u4e2d\uff0c\u8fd9\u884c\u4ee3\u7801\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f60\u4e0d\u9700\u8981\u4e3a\u300c\u8f93\u5165/\u8f93\u51fa\u300d\u6216\u300c\u5b57\u7b26\u4e32\u5904\u7406\u300d\u7b49\u529f\u80fd\u5bfc\u5165\u5355\u72ec\u7684\u5e93\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u5728\u5168\u5c40\u8303\u56f4\u5185\u7f16\u5199\u7684\u4ee3\u7801\u7528\u4f5c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff0c\u56e0\u6b64\u4f60\u4e0d\u9700\u8981\u51fd\u6570 ",(0,a.kt)("inlineCode",{parentName:"li"},"main()"),"\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u4f60\u4e5f\u4e0d\u9700\u8981\u5728\u6bcf\u6761\u8bed\u53e5\u7684\u672b\u5c3e\u90fd\u5199\u5206\u53f7\u3002")),(0,a.kt)("p",null,'\u672c\u6587\u901a\u8fc7\u5411\u4f60\u5c55\u793a "\u5982\u4f55\u5b8c\u6210\u5404\u79cd\u7f16\u7a0b\u4efb\u52a1" \u6765\u4e3a\u4f60\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\u4ee5\u5f00\u59cb\u4f7f\u7528 Swift \u7f16\u5199\u4ee3\u7801\u3002\u5982\u679c\u4f60\u4e0d\u7406\u89e3\u67d0\u4e9b\u5185\u5bb9\uff0c\u4e0d\u7528\u62c5\u5fc3\uff0c\u672c\u6587\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u5728\u672c\u7ad9 Swift \u6559\u7a0b\u7684\u5176\u5b83\u90e8\u5206\u8fdb\u884c\u8be6\u7ec6\u89e3\u91ca\u3002'),(0,a.kt)("h2",{id:"\u7b80\u5355\u503c"},"\u7b80\u5355\u503c"),(0,a.kt)("p",null,"\u5728 Swift \u4e2d\uff0c\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," \u58f0\u660e\u5e38\u91cf\uff0c\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"var"),' \u58f0\u660e\u53d8\u91cf\u3002\u5e38\u91cf\u7684\u503c\u4e0d\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\uff0c\u4f46\u4f60\u5fc5\u987b\u6070\u597d\u4e3a\u5b83\u8d4b\u503c\u4e00\u6b21\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e38\u91cf\u6765\u547d\u540d\u4e00\u4e2a "\u4e00\u6b21\u786e\u5b9a\u4f46\u4f1a\u5728\u8bb8\u591a\u5730\u65b9\u4f7f\u7528\u7684" \u503c\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"var myVariable = 42\nmyVariable = 50\n\nlet myConstant = 42\n")),(0,a.kt)("p",null,"\u5e38\u91cf\u6216\u53d8\u91cf\u5fc5\u987b\u4e0e\u8981\u5206\u914d\u7ed9\u5b83\u7684\u503c\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\u4f46\u662f\u4f60\u4e0d\u5fc5\u603b\u662f\u660e\u786e\u5730\u5199\u51fa\u7c7b\u578b\u3002\u5728\u521b\u5efa\u5e38\u91cf\u6216\u53d8\u91cf\u65f6\u63d0\u4f9b\u503c\u53ef\u8ba9\u7f16\u8bd1\u5668\u63a8\u65ad\u5176\u7c7b\u578b\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u7f16\u8bd1\u5668\u63a8\u65ad ",(0,a.kt)("inlineCode",{parentName:"p"},"myVariable")," \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u56e0\u4e3a\u5b83\u7684\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u6574\u6570\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u521d\u59cb\u503c\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\uff08\u6216\u8005\u5982\u679c\u6ca1\u6709\u521d\u59cb\u503c\uff09\uff0c\u901a\u8fc7\u5728\u53d8\u91cf\u540e\u9762\u5199\u5b83\u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u7528\u5192\u53f7\u5206\u9694\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let implicitInteger = 70\nlet implicitDouble = 70.0\nlet explicitDouble: Double = 70\n")),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a\u663e\u5f0f\u7c7b\u578b\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Float")," \u4e14\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," \u7684\u5e38\u91cf\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let explicitFour: Float = 4\n"))),(0,a.kt)("p",null,"\u503c\u6c38\u8fdc\u4e0d\u4f1a\u9690\u5f0f\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002\u5982\u679c\u4f60\u9700\u8981\u5c06\u503c\u8f6c\u6362\u4e3a\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u8bf7\u663e\u5f0f\u521b\u5efa\u6240\u9700\u7c7b\u578b\u7684\u5b9e\u4f8b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let label = "The width is "\nlet width = 94\nlet widthLabel = label + String(width)\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c1d\u8bd5\u5220\u9664\u6700\u540e\u4e00\u884c\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," \u8f6c\u6362\u3002\u4f60\u5f97\u5230\u4ec0\u4e48\u9519\u8bef\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let label = \"The width is \"\nlet width = 94\nlet widthLabel = label + width\n\n// error-next-line\n// error: Binary operator '+' cannot be applied to operands of type 'String' and 'Int'\n"))),(0,a.kt)("p",null,"\u5728\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u503c\u8fd8\u6709\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff1a\u5c06\u503c\u5199\u5728\u62ec\u53f7\u4e2d\uff0c\u5e76\u5728\u62ec\u53f7\u524d\u5199\u4e00\u4e2a\u53cd\u659c\u6760 \uff080\uff09\u3002\u4f8b\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let apples = 3\nlet oranges = 5\nlet appleSummary = "I have \\(apples) apples."\nlet fruitSummary = "I have \\(apples + oranges) pieces of fruit."\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"\\()")," \u5305\u542b\u6d6e\u70b9\u8ba1\u7b97\uff0c\u5e76\u5728\u95ee\u5019\u8bed\u4e2d\u5305\u542b\u67d0\u4eba\u7684\u59d3\u540d\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let a = 1.2\nlet b = 1.5\nlet sum = "The sum of \\(a) and \\(b) is \\(a + b)"\n// tip-next-line\n// "The sum of 1.2 and 1.5 is 2.7"\n\nlet name = "zhuanghongji"\nlet greeting = "Hi, my name is \\(name)"\n// tip-next-line\n// "Hi, my name is zhuanghongji"\n'))),(0,a.kt)("p",null,"\u5bf9\u4e8e\u5360\u7528\u591a\u884c\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u4e09\u4e2a\u53cc\u5f15\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},'"""'),"\u3002\u6bcf\u4e2a\u5f15\u7528\u884c\u5f00\u5934\u7684\u7f29\u8fdb\u4f1a\u88ab\u79fb\u9664\uff0c\u53ea\u8981\u5b83\u4e0e\u53f3\u5f15\u53f7\uff08closing quotation marks\uff09\u7684\u7f29\u8fdb\u76f8\u5339\u914d\u5373\u53ef\u3002\u4f8b\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let quotation = """\n        Even though there\'s whitespace to the left,\n        the actual lines aren\'t indented.\n            Except for this line.\n        Double quotes (") can appear without being escaped.\n\n        I still have \\(apples + oranges) pieces of fruit.\n        """\n\n// console-start\n// Even though there\'s whitespace to the left,\n// the actual lines aren\'t indented.\n//     Except for this line.\n// Double quotes (") can appear without being escaped.\n//\n// I still have 8 pieces of fruit.\n// console-end\n')),(0,a.kt)("p",null,"\u4f7f\u7528\u65b9\u62ec\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")," \u521b\u5efa\u6570\u7ec4\u548c\u5b57\u5178\uff0c\u5e76\u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u5199\u5165\u7d22\u5f15\u6216\u952e\u6765\u8bbf\u95ee\u5b83\u4eec\u7684\u5143\u7d20\u3002\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u5141\u8bb8\u6709\u9017\u53f7\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var fruits = ["strawberries", "limes", "tangerines"]\nfruits[1] = "grapes"\n\nvar occupations = [\n    "Malcolm": "Captain",\n    "Kaylee": "Mechanic",\n ]\noccupations["Jayne"] = "Public Relations"\n')),(0,a.kt)("p",null,"\u6570\u7ec4\u4f1a\u968f\u7740\u4f60\u6dfb\u52a0\u5143\u7d20\u800c\u81ea\u52a8\u589e\u957f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'fruits.append("blueberries")\nprint(fruits)\n\n// tip-next-line\n// Prints "["strawberries", "grapes", "tangerines", "blueberries"]"\n')),(0,a.kt)("p",null,"\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u65b9\u62ec\u53f7\u6765\u7f16\u5199\u7a7a\u6570\u7ec4\u6216\u5b57\u5178\u3002\u5bf9\u4e8e\u6570\u7ec4\uff0c\u5199 ",(0,a.kt)("inlineCode",{parentName:"p"},"[]"),"\uff0c\u5bf9\u4e8e\u5b57\u5178\uff0c\u5199 ",(0,a.kt)("inlineCode",{parentName:"p"},"[:]"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"fruits = []\noccupations = [:]\n")),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u5c06\u4e00\u4e2a\u7a7a\u6570\u7ec4\u6216\u7a7a\u5b57\u5178\u5206\u914d\u7ed9\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6216\u8005\u53e6\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u4fe1\u606f\u7684\u5730\u65b9\uff0c\u4f60\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let emptyArray: [String] = []\nlet emptyDictionary: [String: Float] = [:]\n")),(0,a.kt)("h2",{id:"\u63a7\u5236\u6d41"},"\u63a7\u5236\u6d41"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u8fdb\u884c\u6761\u4ef6\u5224\u65ad\uff0c\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"for-in"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"while")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"repeat-while")," \u8fdb\u884c\u5faa\u73af\u3002\u6761\u4ef6\u53d8\u91cf\u6216\u5faa\u73af\u53d8\u91cf\u4e24\u8fb9\u7684\u62ec\u53f7\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5305\u56f4\u65b9\u6cd5\u4f53\u7684\u82b1\u62ec\u53f7\u662f\u5fc5\u9700\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let individualScores = [75, 43, 103, 87, 12]\nvar teamScore = 0\nfor score in individualScores {\n    if score > 50 {\n        teamScore += 3\n    } else {\n        teamScore += 1\n    }\n}\nprint(teamScore)\n\n// console-next-line\n// Prints "11"\n')),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," \u8bed\u53e5\u4e2d\uff0c\u6761\u4ef6\u5fc5\u987b\u662f\u4e00\u4e2a\u5e03\u5c14\u8868\u8fbe\u5f0f\u3002\u8fd9\u610f\u5473\u7740\u50cf ",(0,a.kt)("inlineCode",{parentName:"p"},"if score { ... }")," \u8fd9\u6837\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u4e0e\u96f6\u7684\u9690\u5f0f\u6bd4\u8f83\u3002"),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u8d4b\u503c\u7b49\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},"=")," \u540e\u9762\u6216\u8fd4\u56de\u7b26\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," \u540e\u9762\u5199 ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," \u6216 ",(0,a.kt)("inlineCode",{parentName:"p"},"switch"),"\uff0c\u6765\u6839\u636e\u6761\u4ef6\u9009\u4e00\u4e2a\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let scoreDecoration = if teamScore > 10 {\n    "\ud83c\udf89"\n} else {\n    ""\n}\nprint("Score:", teamScore, scoreDecoration)\n\n// console-next-line\n// Prints "Score: 11 \ud83c\udf89"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func getScoreDecoration() -> String {\n    return if teamScore > 10 {\n        "\ud83c\udf89"\n    } else {\n        ""\n    }\n}\n\nlet scoreDecoration = getScoreDecoration()\nprint("Score:", teamScore, scoreDecoration)\n\n// console-next-line\n// Prints "Score: 11 \ud83c\udf89"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c1d\u8bd5\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u6765\u5b9e\u73b0\u4e0a\u9762\u7684\u903b\u8f91\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let scoreDecoration = switch(teamScore) {\ncase let x where x > 10:\n    "\ud83c\udf89"\ndefault:\n    ""\n}\nprint("Score:", teamScore, scoreDecoration)\n\n// console-next-line\n// Prints "Score: 11 \ud83c\udf89"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func getScoreDecoration() -> String {\n    return switch teamScore {\n    case let x where x > 10:\n        "\ud83c\udf89"\n    default:\n        ""\n    }\n}\n\nlet scoreDecoration = getScoreDecoration()\nprint("Score:", teamScore, scoreDecoration)\n\n// console-next-line\n// Prints "Score: 11 \ud83c\udf89"\n'))),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u5c06 ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," \u4e00\u8d77\u4f7f\u7528\u6765\u5904\u7406\u53ef\u80fd\u7f3a\u5931\u7684\u503c\u3002\u8fd9\u4e9b\u503c\u8868\u793a\u4e3a\u53ef\u9009\u503c\uff08optionals\uff09\u3002\u53ef\u9009\u503c\u8981\u4e48\u5305\u542b\u4e00\u4e2a\u503c\uff0c\u8981\u4e48\u5305\u542b ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," \u4ee5\u6307\u660e\u7f3a\u5c11\u4e00\u4e2a\u503c\u3002\u5728\u503c\u7684\u7c7b\u578b\u540e\u9762\u5199\u4e00\u4e2a\u95ee\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," \u6765\u5c06\u503c\u6807\u8bb0\u4e3a\u53ef\u9009\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var optionalString: String? = "Hello"\nprint(optionalString == nil)\n\n// console-next-line\n// Prints "false"\n\nvar optionalName: String? = "John Appleseed"\nvar greeting = "Hello!"\nif let name = optionalName {\n    greeting = "Hello, \\(name)"\n}\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c06 ",(0,a.kt)("inlineCode",{parentName:"p"},"optionalName")," \u66f4\u6539\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"greeting")," \u7684\u503c\u4f1a\u662f\u5565\uff1f\u6dfb\u52a0\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"else")," \u5b50\u53e5\uff08clause\uff09\uff0c\u5982\u679c ",(0,a.kt)("inlineCode",{parentName:"p"},"optionalName")," \u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," \uff0c\u5219\u8bbe\u7f6e\u4e0d\u540c\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"greeting"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var optionalName: String? = nil\nvar greeting = "Hello!"\nif let name = optionalName {\n    greeting = "Hello, \\(name)"\n} else {\n    greeting = "Oh, it is missing"\n}\n\nprint(greeting)\n\n// console-next-line\n// Prints "Oh, it is missing"\n'))),(0,a.kt)("p",null,"\u5982\u679c\u53ef\u9009\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"\uff0c\u5219\u6761\u4ef6\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"\uff0c\u82b1\u62ec\u53f7\u4e2d\u7684\u4ee3\u7801\u5c31\u4f1a\u88ab\u8df3\u8fc7\u3002\u5426\u5219\uff0c\u53ef\u9009\u503c\u5c06\u88ab\u89e3\u5305\uff08unwrapped\uff09\u5e76\u8d4b\u503c\u7ed9 ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," \u540e\u9762\u7684\u5e38\u91cf\uff0c\u8fd9\u4f7f\u5f97\u89e3\u5305\u540e\u7684\u503c\u5728\u4ee3\u7801\u5757\u5185\u53ef\u7528\u3002"),(0,a.kt)("p",null,"\u53e6\u4e00\u79cd\u5904\u7406\u53ef\u9009\u503c\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"??")," \u8fd0\u7b97\u7b26\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002\u5982\u679c\u53ef\u9009\u503c\u7f3a\u5931\uff0c\u9ed8\u8ba4\u503c\u5c31\u4f1a\u88ab\u4f7f\u7528\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let nickname: String? = nil\nlet fullName: String = "John Appleseed"\nlet informalGreeting = "Hi \\(nickname ?? fullName)"\n\n// tip-next-line\n// The value of informalGreeting is "Hi John Appleseed".\n')),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u4f7f\u7528\u66f4\u77ed\u7684\u62fc\u5199\u6765\u89e3\u5305\u4e00\u4e2a\u503c\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u53d8\u91cf\u540d\u6765\u8868\u793a\u8981\u89e3\u5305\u7684\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'if let nickname {\n    print("Hey, \\(nickname)")\n}\n\n// tip-next-line\n// Doesn\'t print anything, because nickname is nil.\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u652f\u6301\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u548c\u5404\u79cd\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c\u4e0d\u9650\u4e8e\u6574\u6570\u548c\u76f8\u7b49\u6027\u6d4b\u8bd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let vegetable = "red pepper"\nswitch vegetable {\ncase "celery":\n    print("Add some raisins and make ants on a log.")\ncase "cucumber", "watercress":\n    print("That would make a good tea sandwich.")\ncase let x where x.hasSuffix("pepper"):\n    print("Is it a spicy \\(x)?")\ndefault:\n    print("Everything tastes good in soup.")\n}\n\n// console-next-line\n// Prints "Is it a spicy red pepper?"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c1d\u8bd5\u5220\u9664 ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," \u5206\u652f\uff08case\uff09\uff0c\u4ec0\u4e48\u9519\u8bef\u4f60\u4f1a\u5f97\u5230\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let vegetable = "red pepper"\nswitch vegetable {\ncase "celery":\n    print("Add some raisins and make ants on a log.")\ncase "cucumber", "watercress":\n    print("That would make a good tea sandwich.")\ncase let x where x.hasSuffix("pepper"):\n    print("Is it a spicy \\(x)?")\n}\n\n// error-next-line\n// error: switch must be exhaustive\n'))),(0,a.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u6a21\u5f0f\uff08pattern\uff09\u4e2d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"let")," \u662f\u5982\u4f55\u7528\u4e8e\u5c06\u5339\u914d\uff08matched\uff09\u5230\u7684\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5e38\u91cf\u7684\u3002"),(0,a.kt)("p",null,"\u5728\u6267\u884c\u5b8c\u5339\u914d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u5206\u652f\u5185\u7684\u4ee3\u7801\u540e\uff0c\u7a0b\u5e8f\u4f1a\u4ece\u8be5 ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u8bed\u53e5\u4e2d\u9000\u51fa\u3002\u4e0d\u4f1a\u7ee7\u7eed\u6267\u884c\u5230\u4e0b\u4e00\u4e2a\u5206\u652f\uff0c\u56e0\u6b64\u4f60\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u5206\u652f\u4ee3\u7801\u7684\u672b\u5c3e\u663e\u5f0f\u5730 break \u6389 ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u3002"),(0,a.kt)("p",null,"\u5728\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"for-in")," \u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u952e\u503c\u5bf9\uff08key-value pair\uff09\u63d0\u4f9b\u4e00\u5bf9\u53d8\u91cf\u540d\u6765\u8fed\u4ee3\u5b57\u5178\u4e2d\u7684 items\u3002\u5b57\u5178\u662f\u4e00\u4e2a\u65e0\u5e8f\u96c6\u5408\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\u952e\u548c\u503c\u4ee5\u4efb\u610f\u987a\u5e8f\u8fed\u4ee3\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let interestingNumbers = [\n    "Prime": [2, 3, 5, 7, 11, 13],\n    "Fibonacci": [1, 1, 2, 3, 5, 8],\n    "Square": [1, 4, 9, 16, 25],\n]\nvar largest = 0\nfor (_, numbers) in interestingNumbers {\n    for number in numbers {\n        if number > largest {\n            largest = number\n        }\n    }\n}\nprint(largest)\n\n// console-next-line\n// Prints "25"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c06 ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," \u66ff\u6362\u4e3a\u53d8\u91cf\u540d\u79f0\uff0c\u5e76\u8ddf\u8e2a\u627e\u51fa\u54ea\u79cd\u6570\u5b57\u662f\u6700\u5927\u7684\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let interestingNumbers = [\n    "Prime": [2, 3, 5, 7, 11, 13],\n    "Fibonacci": [1, 1, 2, 3, 5, 8],\n    "Square": [1, 4, 9, 16, 25],\n]\n\nvar largest = 0\nvar largestKind = "unknown"\nfor (kind, numbers) in interestingNumbers {\n    for number in numbers {\n        if number > largest {\n            largest = number\n            largestKind = kind\n        }\n    }\n}\n\nprint("The kind of \'\\(largestKind)\' of number was largest which is \\(largest)")\n\n// console-next-line\n// Prints "The kind of \'Square\' of number was largest which is 25"\n'))),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," \u6765\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u76f4\u5230\u6761\u4ef6\u53d1\u751f\u53d8\u5316\u3002\u5faa\u73af\u7684\u6761\u4ef6\u53ef\u4ee5\u653e\u5728\u672b\u5c3e\uff0c\u4ee5\u786e\u4fdd\u5faa\u73af\u81f3\u5c11\u8fd0\u884c\u4e00\u6b21\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var n = 2\nwhile n < 100 {\n    n *= 2\n}\nprint(n)\n\n// console-next-line\n// Prints "128"\n\n\nvar m = 2\nrepeat {\n    m *= 2\n} while m < 100\nprint(m)\n\n// console-next-line\n// Prints "128"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c06\u6761\u4ef6\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"m < 100")," \u6539\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"m < 0"),"\uff0c\u770b\u770b\u5f53\u5faa\u73af\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"while")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"repeat-while")," \u7684\u884c\u4e3a\u6709\u4f55\u4e0d\u540c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var n = 2\nwhile n < 0 {\n    n *= 2\n}\nprint(n)\n\n// console-next-line\n// Prints "2"\n\n\nvar m = 2\nrepeat {\n    m *= 2\n} while m < 0\nprint(m)\n\n// console-next-line\n// Prints "4"\n'))),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"..<"),' \u6765\u521b\u5efa\u4e00\u4e2a "\u7d22\u5f15\u7684 range" \u6765\u5c06\u7d22\u5f15\u4fdd\u6301\u5728\u5faa\u73af\u4e2d\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var total = 0\nfor i in 0..<4 {\n    total += i\n}\nprint(total)\n\n// console-next-line\n// Prints "6"\n')),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"..<")," \u521b\u5efa\u7701\u7565\u5176\u4e0a\u9650\u503c\uff08upper value\uff09\u7684 range\uff0c\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"...")," \u521b\u5efa\u5305\u542b\u8fd9\u4e24\u4e2a\u503c\uff08\u4e0b\u9650\u503c\u548c\u4e0a\u9650\u503c\uff09\u7684 range\u3002"),(0,a.kt)("h2",{id:"\u51fd\u6570\u548c\u95ed\u5305"},"\u51fd\u6570\u548c\u95ed\u5305"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"func"),' \u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u3002\u8c03\u7528\u51fd\u6570\uff0c\u65b9\u5f0f\u662f\u5728\u51fd\u6570\u540d\u79f0\u540e\u52a0\u4e0a "\u62ec\u53f7\u53ca\u5176\u4e2d\u7684\u53c2\u6570\u5217\u8868"\u3002\u4f7f\u7528 ',(0,a.kt)("inlineCode",{parentName:"p"},"->"),' \u5c06 "\u53c2\u6570\u540d\u79f0\u548c\u7c7b\u578b" \u4e0e "\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b" \u5206\u5f00\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func greet(person: String, day: String) -> String {\n    return "Hello \\(person), today is \\(day)."\n}\ngreet(person: "Bob", day: "Tuesday")\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5220\u9664 ",(0,a.kt)("inlineCode",{parentName:"p"},"day")," \u53c2\u6570\uff0c\u7136\u540e\u6dfb\u52a0\u4e00\u4e2a\u53c2\u6570\u4ee5\u5728\u95ee\u5019\u8bed\u4e2d\u5305\u542b\u4eca\u5929\u7684\u7279\u8272\u5348\u9910\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func greet(person: String, lunch: String) -> String {\n    return "Hello \\(person), the special lunch today is \\(lunch)."\n}\ngreet(person: "Bob", lunch: "\u5bab\u4fdd\u9e21\u4e01")\n'))),(0,a.kt)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u4f7f\u7528\u5176\u53c2\u6570\u540d\u79f0\u4f5c\u4e3a\u5176\u53c2\u6570\u6807\u7b7e\uff08argument label\uff09\u3002\u5728\u53c2\u6570\u540d\u79f0\u4e4b\u524d\u53ef\u4ee5\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u53c2\u6570\u6807\u7b7e\uff0c\u6216\u5199\u5165 ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," \u4ee5\u4e0d\u4f7f\u7528\u53c2\u6570\u6807\u7b7e\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func greet(_ person: String, on day: String) -> String {\n    return "Hello \\(person), today is \\(day)."\n}\ngreet("John", on: "Wednesday")\n')),(0,a.kt)("p",null,"\u4f7f\u7528\u5143\u7ec4\u751f\u6210\u590d\u5408\u503c\u3002\u4f8b\u5982\uff0c\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u591a\u4e2a\u503c\u3002\u5143\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u540d\u79f0\u6216\u6570\u5b57\u6765\u5f15\u7528\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) {\n    var min = scores[0]\n    var max = scores[0]\n    var sum = 0\n\n    for score in scores {\n        if score > max {\n            max = score\n        } else if score < min {\n            min = score\n        }\n        sum += score\n    }\n    return (min, max, sum)\n}\n\nlet statistics = calculateStatistics(scores: [5, 3, 100, 3, 9])\nprint(statistics.sum)\n\n// console-next-line\n// Prints "120"\n\n\nprint(statistics.2)\n\n// console-next-line\n// Prints "120"\n')),(0,a.kt)("p",null,"\u51fd\u6570\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\uff0c\u5d4c\u5957\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5728\u5916\u90e8\u51fd\u6570\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u3002\u4f60\u53ef\u4ee5\u5728\u8f83\u957f\u6216\u590d\u6742\u7684\u51fd\u6570\u4e2d\u4f7f\u7528\u5d4c\u5957\u51fd\u6570\u6765\u7ec4\u7ec7\u4ee3\u7801\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func returnFifteen() -> Int {\n    var y = 10\n    func add() {\n        y += 5\n    }\n    add()\n    return y\n}\nreturnFifteen()\n\n// tip-next-line\n// Returns "15"\n')),(0,a.kt)("p",null,"\u51fd\u6570\u662f\u4e00\u7b49\u7c7b\u578b\uff08first-class type\uff09\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u5b83\u7684\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func makeIncrementer() -> ((Int) -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nvar increment = makeIncrementer()\nincrement(7)\n\n// tip-next-line\n// Finals "8"\n')),(0,a.kt)("p",null,"\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u5c06\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u5176\u53c2\u6570\u4e4b\u4e00\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {\n    for item in list {\n        if condition(item) {\n            return true\n        }\n    }\n    return false\n}\nfunc lessThanTen(number: Int) -> Bool {\n    return number < 10\n}\nvar numbers = [20, 19, 7, 12]\nhasAnyMatches(list: numbers, condition: lessThanTen)\n\n// tip-next-line\n// Finals "true"\n')),(0,a.kt)("p",null,'\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u95ed\u5305\u7684\u4e00\u79cd\u7279\u4f8b\uff1a\u53ef\u4ee5\u7a0d\u540e\u8c03\u7528\u7684\u4ee3\u7801\u5757\u3002\u95ed\u5305\u4e2d\u7684\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee "\u5728\u521b\u5efa\u95ed\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u53ef\u7528\u7684" \u53d8\u91cf\u548c\u51fd\u6570\uff0c\u5373\u4f7f\u95ed\u5305\u5728\u6267\u884c\u65f6\u5904\u4e8e\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u82b1\u62ec\u53f7 ',(0,a.kt)("inlineCode",{parentName:"p"},"{}")," \u5305\u56f4\u4ee3\u7801\u6765\u7f16\u5199\u6ca1\u6709\u540d\u79f0\u7684\u95ed\u5305\uff0c\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"in"),' \u5c06 "\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b" \u4e0e "\u65b9\u6cd5\u4f53" \u5206\u5f00\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'numbers.map({ (number: Int) -> Int in\n    let result = 3 * number\n    return result\n})\n\n// tip-next-line\n// Results "[60, 57, 21, 36]"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u91cd\u5199\u95ed\u5305\u4ee5\u5bf9\u6240\u6709\u5947\u6570\uff08odd number\uff09\u8fd4\u56de\u96f6\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'numbers.map({ (number: Int) -> Int in\n    if number % 2 != 0 {\n        return 0\n    }\n    return number\n})\n\n// tip-next-line\n// Results "[20, 0, 0, 12]"\n'))),(0,a.kt)("p",null,"\u4f60\u6709\u51e0\u4e2a\u9009\u9879\u53ef\u4ee5\u66f4\u7b80\u6d01\u5730\u7f16\u5199\u95ed\u5305\u3002\u5f53\u95ed\u5305\u7684\u7c7b\u578b\u5df2\u77e5\u65f6\uff0c\u4f8b\u5982\u59d4\u6258\uff08delegate\uff09\u7684\u56de\u8c03\uff0c\u53ef\u4ee5\u7701\u7565\u5176\u53c2\u6570\u7c7b\u578b\u6216\u8fd4\u56de\u7c7b\u578b\uff0c\u6216\u540c\u65f6\u7701\u7565\u3002\u5355\u4e2a\u8bed\u53e5\u95ed\u5305\u9690\u5f0f\u8fd4\u56de\u5176\u552f\u4e00\u8bed\u53e5\u7684\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let mappedNumbers = numbers.map({ number in 3 * number })\nprint(mappedNumbers)\n\n// console-next-line\n// Prints "[60, 57, 21, 36]"\n')),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u901a\u8fc7\u7f16\u53f7\u800c\u4e0d\u662f\u540d\u79f0\u6765\u5f15\u7528\u53c2\u6570\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5728\u975e\u5e38\u77ed\u7684\u95ed\u5305\u4e2d\u7279\u522b\u6709\u7528\u3002\u4f5c\u4e3a\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7684\u95ed\u5305\u53ef\u4ee5\u7d27\u8ddf\u5728\u62ec\u53f7\u4e4b\u540e\u3002\u5f53\u95ed\u5305\u662f\u51fd\u6570\u7684\u552f\u4e00\u53c2\u6570\u65f6\uff0c\u4f60\u53ef\u4ee5\u5b8c\u5168\u7701\u7565\u62ec\u53f7\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let sortedNumbers = numbers.sorted() { $0 > $1 }\nprint(sortedNumbers)\n\n// console-next-line\n// Prints "[20, 19, 12, 7]"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let sortedNumbers = numbers.sorted { $0 > $1 }\nprint(sortedNumbers)\n\n// console-next-line\n// Prints "[20, 19, 12, 7]"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"// \u9644 map \u548c sorted \u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u4ee5\u65b9\u4fbf\u7406\u89e3\u4e0a\u9762\u7684\u95ed\u5305\n\nfunc map<T>(_ transform: (Element) throws -> T) rethrows -> [T]\n\nfunc sorted(by areInIncreasingOrder: (Element, Element) throws -> Bool) rethrows -> [Element]\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"\u5982\u679c\u4f60\u540e\u7eed\u6709\u8ba1\u5212\u5b66\u4e60 SwiftUI\uff0c\u8bf7\u52a1\u5fc5\u5c06\u672c\u5c0f\u8282\u5185\u5bb9\u7406\u89e3\u900f\u5f7b\u3002")),(0,a.kt)("h2",{id:"\u5bf9\u8c61\u548c\u7c7b"},"\u5bf9\u8c61\u548c\u7c7b"),(0,a.kt)("p",null,"\u901a\u8fc7\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"class"),' \u540e\u5199\u7c7b\u540d\u6765\u521b\u5efa\u7c7b\u3002"\u7c7b\u4e2d\u7684\u5c5e\u6027\u58f0\u660e" \u4e0e "\u5e38\u91cf\u6216\u53d8\u91cf\u58f0\u660e" \u7684\u7f16\u5199\u65b9\u5f0f\u76f8\u540c\uff0c\u53ea\u662f\uff08except that\uff09\u5b83\u4f4d\u4e8e\u7c7b\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u540c\u6837\uff0c\u65b9\u6cd5\u548c\u51fd\u6570\u58f0\u660e\u7684\u7f16\u5199\u65b9\u5f0f\u76f8\u540c\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class Shape {\n    var numberOfSides = 0\n    func simpleDescription() -> String {\n        return "A shape with \\(numberOfSides) sides."\n    }\n}\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u6dfb\u52a0\u4e00\u4e2a\u5e26\u6709 \u7684\u5e38\u91cf\u5c5e\u6027 let\uff0c\u5e76\u6dfb\u52a0\u53e6\u4e00\u4e2a\u63a5\u53d7\u53c2\u6570\u7684\u65b9\u6cd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class Shape {\n    var numberOfSides = 0\n    func simpleDescription() -> String {\n        return "A shape with \\(numberOfSides) sides."\n    }\n\n    let lengthOfSide = 3\n    func plusLengthOfSideWith(value: Int) -> Int {\n        return lengthOfSide + value\n    }\n}\n'))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// \u4e00\u822c\u79f0\u4e3a "\u53d8\u91cf\uff08variable\uff09"\nvar v = ""\n// \u4e00\u822c\u79f0\u4e3a "\u5e38\u91cf\uff08constant\uff09"\nlet c = ""\n// \u4e00\u822c\u79f0\u4e3a "\u51fd\u6570\uff08function\uff09"\nfunc foo() { /** ... */ }\n\nclass AClass {\n    // \u4e00\u822c\u79f0\u4e3a "\u5c5e\u6027\uff08property\uff09"\n    var p1 = ""\n    let p2 = ""\n\n    // \u4e00\u822c\u79f0\u4e3a "\u65b9\u6cd5\uff08method\uff09"\n    func bar() { /** ... */ }\n}\n'))),(0,a.kt)("br",null),(0,a.kt)("p",null,"\u901a\u8fc7\u5728\u7c7b\u540d\u540e\u52a0\u4e0a\u62ec\u53f7\u6765\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u3002\u4f7f\u7528\u70b9\u8bed\u6cd5\u8bbf\u95ee\u5b9e\u4f8b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var shape = Shape()\nshape.numberOfSides = 7\nvar shapeDescription = shape.simpleDescription()\n\n// Values "A shape with 7 sides."\n')),(0,a.kt)("p",null,"\u8fd9\u4e2a\u7248\u672c\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"Shape")," \u7c7b\u7f3a\u5c11\u4e00\u4e9b\u91cd\u8981\u5185\u5bb9\uff1a\u5728\u521b\u5efa\u5b9e\u4f8b\u65f6\u8bbe\u7f6e\u7c7b\u7684\u521d\u59cb\u5316\u7a0b\u5668\uff08initializer\uff09\u3002\u7528\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," \u521b\u5efa\u4e00\u4e2a\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class NamedShape {\n    var numberOfSides: Int = 0\n    var name: String\n\n    init(name: String) {\n       self.name = name\n    }\n\n    func simpleDescription() -> String {\n       return "A shape with \\(numberOfSides) sides."\n    }\n}\n')),(0,a.kt)("p",null,"\u6ce8\u610f ",(0,a.kt)("inlineCode",{parentName:"p"},"self")," \u662f\u5982\u4f55\u7528\u6765\u5c06\u5c5e\u6027 ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," \u4e0e\u521d\u59cb\u5316\u5668\u53c2\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," \u533a\u5206\u5f00\u7684\u3002\u5f53\u4f60\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u65f6\uff0c\u521d\u59cb\u5316\u5668\u7684\u53c2\u6570\u5c31\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\u88ab\u4f20\u9012\u3002\u6bcf\u4e2a\u5c5e\u6027\u90fd\u9700\u8981\u8d4b\u503c\uff0c\u8981\u4e48\u5728\u5176\u58f0\u660e\u4e2d\uff08\u6bd4\u5982 ",(0,a.kt)("inlineCode",{parentName:"p"},"numberOfSidesname"),"\uff09\uff0c\u8981\u4e48\u5728\u521d\u59cb\u5316\u7a0b\u5e8f\u5668\u4e2d\uff08\u6bd4\u5982 ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),"\uff09\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u9700\u8981\u5728\u91ca\u653e\uff08deallocated\uff09\u5bf9\u8c61\u4e4b\u524d\u6267\u884c\u4e00\u4e9b\u6e05\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"deinit")," \u6765\u521b\u5efa\u53cd\u521d\u59cb\u5316\u5668\uff08deinitializer\uff09\u3002"),(0,a.kt)("p",null,"\u5b50\u7c7b\u5728\u5176\u7c7b\u540d\u540e\u5305\u542b\uff08include\uff09\u5176\u8d85\u7c7b\u540d\uff0c\u7528\u5192\u53f7\u5206\u9694\u3002\u7c7b\u4e0d\u9700\u8981\u7ee7\u627f\u4efb\u4f55\u300c\u6807\u51c6\u6839\u7c7b\uff08standard root class\uff09\u300d\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5305\u542b\u6216\u7701\u7565\u8d85\u7c7b\u3002"),(0,a.kt)("p",null,"\u8986\u76d6\u8d85\u7c7b\u5b9e\u73b0\u7684\u5b50\u7c7b\u65b9\u6cd5\u8981\u88ab ",(0,a.kt)("inlineCode",{parentName:"p"},"override")," \u6807\u8bb0\u3002\u610f\u5916\u8986\u76d6\u65b9\u6cd5\uff08\u6ca1\u6709 ",(0,a.kt)("inlineCode",{parentName:"p"},"override"),"\uff09\u4f1a\u88ab\u7f16\u8bd1\u5668\u68c0\u6d4b\u4e3a\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u68c0\u6d4b\u51fa\u88ab ",(0,a.kt)("inlineCode",{parentName:"p"},"override")," \u6807\u8bb0\u4f46\u5b9e\u9645\u4e0a\u5e76\u672a\u8986\u76d6\u8d85\u7c7b\u4e2d\u4efb\u4f55\u65b9\u6cd5\u7684\u65b9\u6cd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class Square: NamedShape {\n    var sideLength: Double\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n\n    func area() -> Double {\n        return sideLength * sideLength\n    }\n\n    override func simpleDescription() -> String {\n        return "A square with sides of length \\(sideLength)."\n    }\n}\nlet test = Square(sideLength: 5.2, name: "my test square")\n\ntest.area()\n// Values "27.04"\n\n\ntest.simpleDescription()\n// Values "A square with sides of length 5.2."\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u521b\u5efa\u53e6\u4e00\u4e2a\u540d\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Circle")," \u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"NamedShape")," \u5b50\u7c7b\uff0c\u8be5\u5b50\u7c7b\u7684\u521d\u59cb\u5316\u5668\u63a5\u6536\u4e00\u4e2a\u534a\u5f84\u548c\u4e00\u4e2a\u540d\u5b57\u4f5c\u4e3a\u5176\u53c2\u6570\u3002\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"Circle")," \u7c7b\u4e0a\u5b9e\u73b0 ",(0,a.kt)("inlineCode",{parentName:"p"},"area()")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"simpleDescription()")," \u65b9\u6cd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class Circle: NamedShape {\n    var radius: Double\n\n    init(radius: Double, name: String) {\n        self.radius = radius\n        super.init(name: name)\n    }\n\n    func area() -> Double {\n        return Double.pi * radius * radius\n    }\n\n    override func simpleDescription() -> String {\n        return "A circle with radius of \\(radius)."\n    }\n}\nlet test = Circle(radius: 10, name: "my test circle")\n\ntest.area()\n// Values "314.1592653589793"\n\ntest.simpleDescription()\n// Values "A circle with radius of 10.0."\n'))),(0,a.kt)("p",null,"\u9664\u4e86\u5b58\u50a8\u7684\u7b80\u5355\u5c5e\u6027\u5916\uff0c\u5c5e\u6027\u8fd8\u53ef\u4ee5\u6709 ",(0,a.kt)("inlineCode",{parentName:"p"},"getter")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"setter"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class EquilateralTriangle: NamedShape {\n    var sideLength: Double = 0.0\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 3\n    }\n\n    var perimeter: Double {\n        get {\n             return 3.0 * sideLength\n        }\n        set {\n            sideLength = newValue / 3.0\n        }\n    }\n\n    override func simpleDescription() -> String {\n        return "An equilateral triangle with sides of length \\(sideLength)."\n    }\n}\n\nvar triangle = EquilateralTriangle(sideLength: 3.1, name: "a triangle")\nprint(triangle.perimeter)\n// Prints "9.3"\n\n\ntriangle.perimeter = 9.9\nprint(triangle.sideLength)\n// Prints "3.3000000000000003"\n')),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"perimeter")," \u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"setter")," \u4e2d\uff0c\u65b0\u503c\u5177\u6709\u9690\u5f0f\u540d\u79f0 ",(0,a.kt)("inlineCode",{parentName:"p"},"newValue"),"\u3002\u4f60\u53ef\u4ee5\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," \u4e4b\u540e\u7684\u62ec\u53f7\u4e2d\u63d0\u4f9b\u660e\u786e\u7684\u540d\u79f0\u3002\u6bd4\u5982"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"set(explicitNameValue) {\n    sideLength = explicitNameValue / 3.0\n}\n")),(0,a.kt)("p",null,"\u6ce8\u610f\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"EquilateralTriangle")," \u7c7b\u7684\u521d\u59cb\u5316\u5668\u5177\u6709\u4e09\u4e2a\u4e0d\u540c\u7684\u6b65\u9aa4\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u8bbe\u7f6e\u5b50\u7c7b\u58f0\u660e\u7684\u5c5e\u6027\u503c\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u8c03\u7528\u8d85\u7c7b\u7684\u521d\u59cb\u5316\u5668\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u66f4\u6539\u8d85\u7c7b\u5b9a\u4e49\u7684\u5c5e\u6027\u503c\u3002\u6b64\u5916\uff0cmethods\u3001getter \u6216 setter \u7684\u8bbe\u7f6e\u5de5\u4f5c\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b8c\u6210\u3002")),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u4e0d\u9700\u8981\u5bf9\u5c5e\u6027\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u4ecd\u9700\u8981\u5728\u8bbe\u7f6e\u65b0\u503c\u4e4b\u524d\u548c\u4e4b\u540e\u6267\u884c\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"willSet")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"didSet"),"\u3002\u53ea\u8981\u503c\u5728\u521d\u59cb\u503c\u5668\u4e4b\u5916\u53d1\u751f\u53d8\u5316\uff0c\u4f60\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"willSet")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"didSet")," \u4e2d\u63d0\u4f9b\u7684\u4ee3\u7801\u5c31\u4f1a\u6267\u884c\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u7c7b\u786e\u4fdd\u5176\u4e09\u89d2\u5f62\u7684\u8fb9\u957f\u59cb\u7ec8\u4e0e\u5176\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u76f8\u540c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class TriangleAndSquare {\n    var triangle: EquilateralTriangle {\n        willSet {\n            square.sideLength = newValue.sideLength\n        }\n    }\n    var square: Square {\n        willSet {\n            triangle.sideLength = newValue.sideLength\n        }\n    }\n    init(size: Double, name: String) {\n        square = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sideLength: size, name: name)\n    }\n}\nvar triangleAndSquare = TriangleAndSquare(size: 10, name: "another test shape")\n\nprint(triangleAndSquare.square.sideLength)\n// Prints "10.0"\n\nprint(triangleAndSquare.triangle.sideLength)\n// Prints "10.0"\n\ntriangleAndSquare.square = Square(sideLength: 50, name: "larger square")\nprint(triangleAndSquare.triangle.sideLength)\n// Prints "50.0"\n')),(0,a.kt)("p",null,"\u4f7f\u7528\u53ef\u9009\u503c\u65f6\uff0c\u53ef\u4ee5\u5728\u65b9\u6cd5\u3001\u5c5e\u6027\u548c\u4e0b\u6807\u7b49\u64cd\u4f5c\u4e4b\u524d\u7f16\u5199 ",(0,a.kt)("inlineCode",{parentName:"p"},"?"),"\u3002\u5982\u679c ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," \u4e4b\u524d\u7684\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"\uff0c\u5219 ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," \u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u88ab\u5ffd\u7565\u4e14\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"\u3002\u5426\u5219\uff0c\u53ef\u9009\u503c\u88ab\u89e3\u5305\uff0c\u5e76\u4e14 ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," \u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f5c\u7528\u4e8e\u89e3\u5305\u7684\u503c\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u90fd\u662f\u53ef\u9009\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let optionalSquare: Square? = Square(sideLength: 2.5, name: "optional square")\nlet sideLength = optionalSquare?.sideLength\n')),(0,a.kt)("h2",{id:"\u679a\u4e3e\u548c\u7ed3\u6784"},"\u679a\u4e3e\u548c\u7ed3\u6784"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"enum")," \u521b\u5efa\u679a\u4e3e\u3002\u4e0e\u7c7b\u548c\u6240\u6709\u5176\u4ed6\u547d\u540d\u7c7b\u578b\u4e00\u6837\uff0c\u679a\u4e3e\u53ef\u4ee5\u5177\u6709\u4e0e\u4e4b\u5173\u8054\u7684\u65b9\u6cd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'enum Rank: Int {\n    case ace = 1\n    case two, three, four, five, six, seven, eight, nine, ten\n    case jack, queen, king\n\n    func simpleDescription() -> String {\n        switch self {\n        case .ace:\n            return "ace"\n        case .jack:\n            return "jack"\n        case .queen:\n            return "queen"\n        case .king:\n            return "king"\n        default:\n            return String(self.rawValue)\n        }\n    }\n}\n\nlet ace = Rank.ace\n// Values ".ace"\n\nlet aceRawValue = ace.rawValue\n// Values "1"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u6bd4\u8f83\u539f\u59cb\u503c\u6765\u6bd4\u8f83\u4e24\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"Rank")," \u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func isLeftLargerThanRight(left: Rank, right: Rank) -> Bool {\n    return left.rawValue - right.rawValue > 0\n}\nisLeftLargerThanRight(left: .four, right: .three)\n\n// tip-next-line\n// Results "true"\n'))),(0,a.kt)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSwift \u4ece\u96f6\u5f00\u59cb\u5206\u914d\u539f\u59cb\u503c\uff08raw value\uff09\u5e76\u6bcf\u6b21\u9012\u589e ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"\uff0c\u4f46\u4f60\u53ef\u4ee5\u901a\u8fc7\u663e\u5f0f\u6307\u5b9a\u503c\u6765\u66f4\u6539\u6b64\u884c\u4e3a\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"Ace")," \u88ab\u660e\u786e\u5730\u8d4b\u4e88\u4e86\u539f\u59cb\u503c ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"\uff0c\u5176\u4f59\u7684\u539f\u59cb\u503c\u6309\u987a\u5e8f\u5206\u914d\u3002\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u6216\u6d6e\u70b9\u6570\u4f5c\u4e3a\u679a\u4e3e\u7684\u539f\u59cb\u7c7b\u578b\uff08raw type\uff09\u3002\u4f7f\u7528\u5c5e\u6027 ",(0,a.kt)("inlineCode",{parentName:"p"},"rawValue")," \u8bbf\u95ee\u4e00\u4e2a\u679a\u4e3e\u5b9e\u4f8b\u7684\u539f\u59cb\u503c\u3002"),(0,a.kt)("p",null,"\u4f7f\u7528\u521d\u59cb\u5316\u5668 ",(0,a.kt)("inlineCode",{parentName:"p"},"init?(rawValue:)")," \u6765\u901a\u8fc7\u539f\u59cb\u503c\u521b\u5efa\u679a\u4e3e\u5b9e\u4f8b\u3002\u5b83\u4f1a\u8fd4\u56de\u4e0e\u539f\u59cb\u503c\u5339\u914d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"Rank")," \u679a\u4e3e\u5b9e\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u7684\u8bdd\u5c31\u8fd4\u56de ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'if let convertedRank = Rank(rawValue: 3) {\n    let threeDescription = convertedRank.simpleDescription()\n    // tip-next-line\n    // Values "3"\n}\n\nif let convertedRank2 = Rank(rawValue: 11) {\n    let elevenDescription = convertedRank2.simpleDescription()\n    // tip-next-line\n    // Values "jack"\n}\n')),(0,a.kt)("p",null,"\u679a\u4e3e ",(0,a.kt)("inlineCode",{parentName:"p"},"case")," \u7684\u503c\u662f\u5b9e\u9645\u503c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u53e6\u4e00\u79cd\u7f16\u5199\u539f\u59cb\u503c\u7684\u65b9\u5f0f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f7f\u7528\u573a\u666f\u4e2d\u7684\u539f\u59cb\u503c\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u5c31\u4e0d\u5fc5\u63d0\u4f9b\u539f\u59cb\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'enum Suit {\n    case spades, hearts, diamonds, clubs\n\n    func simpleDescription() -> String {\n        switch self {\n        case .spades:\n            return "spades"\n        case .hearts:\n            return "hearts"\n        case .diamonds:\n            return "diamonds"\n        case .clubs:\n            return "clubs"\n        }\n    }\n}\n\nlet hearts = Suit.hearts\n// Values ".hearts"\n\nlet heartsDescription = hearts.simpleDescription()\n// Values "hearts"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u7ed9 ",(0,a.kt)("inlineCode",{parentName:"p"},"Suit")," \u6dfb\u52a0\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"color()")," \u65b9\u6cd5\uff0c \u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"spades")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"clubs"),' \u8fd4\u56de "\u9ed1\u8272"\uff0c\u4e3a ',(0,a.kt)("inlineCode",{parentName:"p"},"hearts")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"diamonds"),' \u8fd4\u56de "\u7ea2\u8272"\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// spades   [spe\u026adz]     - \u9ed1\u6843\n// clubs    [kl\u028cbz]      - \u6885\u82b1\n// hearts   [h\u0251\u02d0rtz]     - \u7ea2\u5fc3\n// diamonds [\u02c8da\u026a\u0259m\u0259ndz] - \u65b9\u5757\n\nenum Suit {\n    case spades, hearts, diamonds, clubs\n\n    // highlight-start\n    func color() -> String {\n        switch self {\n        case .spades:\n            return "black"\n        case .clubs:\n            return "black"\n        case .hearts:\n            return "red"\n        case .diamonds:\n            return "red"\n        }\n    }\n    // highlight-end\n\n    func simpleDescription() -> String {\n        switch self {\n        case .spades:\n            return "spades"\n        case .hearts:\n            return "hearts"\n        case .diamonds:\n            return "diamonds"\n        case .clubs:\n            return "clubs"\n        }\n    }\n}\n\nprint(Suit.spades.color(), Suit.clubs.color(), Suit.hearts.color(), Suit.diamonds.color())\n// Prints "black black red red"\n'))),(0,a.kt)("p",null,"\u6ce8\u610f\u4e0a\u9762\u5f15\u7528\u679a\u4e3e ",(0,a.kt)("inlineCode",{parentName:"p"},"hearts")," \u7684\u4e24\u79cd\u65b9\u5f0f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"Suit.hearts")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},".heart"),"\uff09\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5f53\u7ed9\u5e38\u91cf ",(0,a.kt)("inlineCode",{parentName:"li"},"hearts")," \u8d4b\u503c\u65f6\uff0c\u679a\u4e3e\u503c\u662f\u7528\u5b83\u7684\u5168\u540d\uff08full name\uff09",(0,a.kt)("inlineCode",{parentName:"li"},"Suit.hearts")," \u8fdb\u884c\u5f15\u7528\u7684\uff0c\u56e0\u4e3a\u8be5\u5e38\u91cf\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u7c7b\u578b\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u5728 ",(0,a.kt)("inlineCode",{parentName:"li"},"switch")," \u5185\u90e8\uff0c\u679a\u4e3e\u503c\u7528\u5b83\u7684\u7f29\u5199\u5f62\u5f0f\uff08abbreviated form\uff09",(0,a.kt)("inlineCode",{parentName:"li"},".hearts")," \u8fdb\u884c\u5f15\u7528\u7684\uff0c\u56e0\u4e3a ",(0,a.kt)("inlineCode",{parentName:"li"},"self")," \u7684\u503c\u5df2\u77e5\u662f ",(0,a.kt)("inlineCode",{parentName:"li"},"suit"),"\u3002")),(0,a.kt)("p",null,"\u53ea\u8981\u503c\u7684\u7c7b\u578b\u5df2\u77e5\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f29\u5199\u5f62\u5f0f\u3002\u6bd4\u5982\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let anotherHearts: Suit = .hearts\n")),(0,a.kt)("p",null,'\u5982\u679c\u679a\u4e3e\u5177\u6709\u539f\u59cb\u503c\uff0c\u8fd9\u4e9b\u503c\u5c31\u4f1a\u4f5c\u4e3a\u58f0\u660e\u786e\u5b9a\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u7279\u5b9a\uff08particular\uff09\u679a\u4e3e case \u7684\u6bcf\u4e2a\u5b9e\u4f8b\u59cb\u7ec8\u5177\u6709\u76f8\u540c\u7684\u539f\u59cb\u503c\u3002\u679a\u4e3e case \u7684\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u8ba9 "\u503c" \u4e0e case \u76f8\u5173\u8054\uff08associated\uff09\uff0c\u8fd9\u4e9b\u503c\u662f\u5728\u521b\u5efa\u5b9e\u4f8b\u65f6\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u5bf9\u4e8e\u679a\u4e3e case \u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u4e0d\u540c\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'enum A: Int {\n    // \u539f\u59cb\u503c\u4e3a 1\n    case one = 1\n    // \u539f\u59cb\u503c\u4e3a 2\n    case two = 2\n}\n\n\nenum B {\n    // \u5173\u8054\u503c\n    case man(String)\n    case lady(String)\n\n    // \u5b9e\u4f8b B.man("zhangsan")  \u7684\u5173\u8054\u503c\u662f "zhangsan"\n    // \u5b9e\u4f8b B.man("lisi")      \u7684\u5173\u8054\u503c\u662f "lisi"\n    // \u5b9e\u4f8b B.lady("xishi")    \u7684\u5173\u8054\u503c\u662f "xishi"\n    // \u5b9e\u4f8b B.lady("diaochan") \u7684\u5173\u8054\u503c\u662f "diaochan"\n}\n')),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5173\u8054\u503c\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u679a\u4e3e case \u5b9e\u4f8b\u7684\u5b58\u50a8\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u8bbe\u60f3\u4e00\u4e2a\u4ece\u670d\u52a1\u5668\u8bf7\u6c42\u65e5\u51fa\u548c\u65e5\u843d\u65f6\u95f4\u7684\u573a\u666f\u3002\u670d\u52a1\u5668\u8981\u4e48\u4ee5\u8bf7\u6c42\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\uff0c\u8981\u4e48\u4ee5\u51fa\u9519\u63cf\u8ff0\u4f5c\u4e3a\u54cd\u5e94\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'enum ServerResponse {\n    case result(String, String)\n    case failure(String)\n}\n\nlet success = ServerResponse.result("6:00 am", "8:09 pm")\nlet failure = ServerResponse.failure("Out of cheese.")\n\nswitch success {\ncase let .result(sunrise, sunset):\n    print("Sunrise is at \\(sunrise) and sunset is at \\(sunset).")\ncase let .failure(message):\n    print("Failure...  \\(message)")\n}\n\n// console-next-line\n// Prints "Sunrise is at 6:00 am and sunset is at 8:09 pm."\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u6dfb\u52a0\u7b2c\u4e09\u79cd case \u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"ServerResponse")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u4e2d\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'enum ServerResponse {\n    case result(String, String)\n    case failure(String)\n    // highlight-next-line\n    case unknown\n}\n\nlet success = ServerResponse.result("6:00 am", "8:09 pm")\nlet failure = ServerResponse.failure("Out of cheese.")\n// highlight-next-line\nlet unknown = ServerResponse.unknown\n\n// highlight-next-line\nswitch unknown {\ncase let .result(sunrise, sunset):\n    print("Sunrise is at \\(sunrise) and sunset is at \\(sunset).")\ncase let .failure(message):\n    print("Failure...  \\(message)")\n// highlight-start\ncase .unknown:\n    print("Unknow")\n// highlight-end\n}\n\n// console-next-line\n// Prints "Unknow"\n'))),(0,a.kt)("p",null,'\u8bf7\u6ce8\u610f\u65e5\u51fa\u548c\u65e5\u843d\u65f6\u95f4\u662f\u5982\u4f55 "\u4f5c\u4e3a\u503c\u4e0e ',(0,a.kt)("inlineCode",{parentName:"p"},"switch - case"),' \u5339\u914d\u7684\u4e00\u90e8\u5206" \u4ece ',(0,a.kt)("inlineCode",{parentName:"p"},"ServerResponse")," \u503c\u4e2d\u63d0\u53d6\uff08extracted\uff09\u51fa\u6765\u7684\u3002"),(0,a.kt)("p",null,"\u7528\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," \u521b\u5efa\u7ed3\u6784\u4f53\u3002\u7ed3\u6784\u4f53\u652f\u6301\u8bb8\u591a\u4e0e\u7c7b\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u5305\u62ec\u65b9\u6cd5\u548c\u521d\u59cb\u5316\u5668\u3002"),(0,a.kt)("p",null,"\u7ed3\u6784\u4f53\u548c\u7c7b\u4e4b\u95f4\u6700\u91cd\u8981\u7684\u533a\u522b\u4e4b\u4e00\u662f\uff1a\u7ed3\u6784\u4f53\u5728\u4ee3\u7801\u4e2d\u4f20\u9012\u65f6\u603b\u662f\u88ab\u590d\u5236\uff0c\u800c\u7c7b\u662f\u901a\u8fc7\u5f15\u7528\u8fdb\u884c\u4f20\u9012\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'struct Card {\n    var rank: Rank\n    var suit: Suit\n    func simpleDescription() -> String {\n        return "The \\(rank.simpleDescription()) of \\(suit.simpleDescription())"\n    }\n}\nlet threeOfSpades = Card(rank: .three, suit: .spades)\nlet threeOfSpadesDescription = threeOfSpades.simpleDescription()\n\n// tip-next-line\n// Values "The 3 of spades"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e00\u526f\u5b8c\u6574\u7eb8\u724c\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u5f20\u724c\u7684\u7b49\u7ea7\u548c\u82b1\u8272\u7ec4\u5408\u90fd\u6709\u4e00\u5f20\u724c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"func getFullDeckCards() -> [Card] {\n    var result: [Card] = []\n    for num in 1...13 {\n        result.append(Card(rank: Rank(rawValue: num)!, suit: .spades))\n        result.append(Card(rank: Rank(rawValue: num)!, suit: .hearts))\n        result.append(Card(rank: Rank(rawValue: num)!, suit: .diamonds))\n        result.append(Card(rank: Rank(rawValue: num)!, suit: .clubs))\n    }\n    return result\n}\n\nlet cards = getFullDeckCards()\ncards.forEach { print($0.simpleDescription()) }\n\n// console-start\n// The ace of spades\n// The ace of hearts\n// The ace of diamonds\n// The ace of clubs\n// The 2 of spades\n// The 2 of hearts\n// The 2 of diamonds\n// The 2 of clubs\n// The 3 of spades\n// The 3 of hearts\n// The 3 of diamonds\n// The 3 of clubs\n// The 4 of spades\n// The 4 of hearts\n// The 4 of diamonds\n// The 4 of clubs\n// The 5 of spades\n// The 5 of hearts\n// The 5 of diamonds\n// The 5 of clubs\n// The 6 of spades\n// The 6 of hearts\n// The 6 of diamonds\n// The 6 of clubs\n// The 7 of spades\n// The 7 of hearts\n// The 7 of diamonds\n// The 7 of clubs\n// The 8 of spades\n// The 8 of hearts\n// The 8 of diamonds\n// The 8 of clubs\n// The 9 of spades\n// The 9 of hearts\n// The 9 of diamonds\n// The 9 of clubs\n// The 10 of spades\n// The 10 of hearts\n// The 10 of diamonds\n// The 10 of clubs\n// The jack of spades\n// The jack of hearts\n// The jack of diamonds\n// The jack of clubs\n// The queen of spades\n// The queen of hearts\n// The queen of diamonds\n// The queen of clubs\n// The king of spades\n// The king of hearts\n// The king of diamonds\n// The king of clubs\n// console-end\n"))),(0,a.kt)("h2",{id:"\u5e76\u53d1"},"\u5e76\u53d1"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," \u6807\u8bb0\u5f02\u6b65\u8fd0\u884c\u7684\u51fd\u6570\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func fetchUserID(from server: String) async -> Int {\n    if server == "primary" {\n        return 97\n    }\n    return 501\n}\n')),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," \u5728\u5f02\u6b65\u51fd\u6570\u7684\u524d\u9762\u6807\u8bb0\u5176\u8c03\u7528\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func fetchUsername(from server: String) async -> String {\n    let userID = await fetchUserID(from: server)\n    if userID == 501 {\n        return "John Appleseed"\n    }\n    return "Guest"\n}\n')),(0,a.kt)("p",null,"\u7528\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"async let")," \u8c03\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u53ef\u4ee5\u8ba9\u5b83\u4e0e\u5176\u5b83\u5f02\u6b65\u4ee3\u7801\u5e76\u884c\uff08parallel\uff09\u8fd0\u884c\u3002\u5f53\u4f60\u4f7f\u7528\u5b83\u7684\u503c\u8fd4\u56de\u65f6\uff0c\u5199 ",(0,a.kt)("inlineCode",{parentName:"p"},"await"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func connectUser(to server: String) async {\n    async let userID = fetchUserID(from: server)\n    async let username = fetchUsername(from: server)\n    let greeting = await "Hello \\(username), user ID \\(userID)"\n    print(greeting)\n}\n')),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"Task")," \u4ece\u540c\u6b65\u4ee3\u7801\u4e2d\u8c03\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u800c\u65e0\u9700\u7b49\u5f85\u5b83\u4eec\u8fd4\u56de\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'Task {\n    await connectUser(to: "primary")\n}\n\n// console-next-line\n// Prints "Hello Guest, user ID 97"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5728\u5f02\u6b65\u51fd\u6570\u524d\u540e\u6216\u5176\u4e2d\u6dfb\u52a0\u65e5\u5fd7\u4ee3\u7801\uff0c\u4ee5\u8fdb\u4e00\u6b65\u4e86\u89e3\u4ed6\u4eec\u7684\u6267\u884c\u987a\u5e8f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func fetchUserID(from server: String) async -> Int {\n    // highlight-next-line\n    print("In fetchUserID")\n    if server == "primary" {\n        return 97\n    }\n    return 501\n}\n\nfunc fetchUsername(from server: String) async -> String {\n    // highlight-next-line\n    print("In fetchUsername, before fetchUserID")\n    let userID = await fetchUserID(from: server)\n    // highlight-next-line\n    print("In fetchUsername, after fetchUserID")\n    if userID == 501 {\n        return "John Appleseed"\n    }\n    return "Guest"\n}\n\nfunc connectUser(to server: String) async {\n    // highlight-next-line\n    print("In connectUser, before async let fetchUserID")\n    async let userID = fetchUserID(from: server)\n    // highlight-next-line\n    print("In connectUser, before async let fetchUsername")\n    async let username = fetchUsername(from: server)\n    // highlight-next-line\n    print("In connectUser, before await")\n    let greeting = await "Hello \\(username), user ID \\(userID)"\n    // highlight-next-line\n    print("In connectUser, after await")\n    print(greeting)\n}\n\nTask {\n    // highlight-next-line\n    // print("times: 1") / print("times: 2") / print("times: 3") ...\n\n    // highlight-next-line\n    print("Before Task connectUser")\n    await connectUser(to: "primary")\n    // highlight-next-line\n    print("After Task connectUser")\n}\n\n// console-start\n// times: 1\n// Before Task connectUser\n// In connectUser, before async let fetchUserID\n// In connectUser, before async let fetchUsername\n// In connectUser, before await\n// In fetchUsername, before fetchUserID\n// In fetchUserID\n// In fetchUserID\n// In fetchUsername, after fetchUserID\n// In connectUser, after await\n// Hello Guest, user ID 97\n// After Task connectUser\n\n// times: 2\n// Before Task connectUser\n// In connectUser, before async let fetchUserID\n// In connectUser, before async let fetchUsername\n// In fetchUserID\n// In connectUser, before await\n// In fetchUsername, before fetchUserID\n// In fetchUserID\n// In fetchUsername, after fetchUserID\n// In connectUser, after await\n// Hello Guest, user ID 97\n// After Task connectUser\n\n// times: 3\n// Before Task connectUser\n// In connectUser, before async let fetchUserID\n// In connectUser, before async let fetchUsername\n// In connectUser, before await\n// In fetchUserID\n// In fetchUsername, before fetchUserID\n// In fetchUserID\n// In fetchUsername, after fetchUserID\n// In connectUser, after await\n// Hello Guest, user ID 97\n// After Task connectUser\n// console-end\n'))),(0,a.kt)("h2",{id:"\u534f\u8bae\u548c\u6269\u5c55"},"\u534f\u8bae\u548c\u6269\u5c55"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"protocol")," \u58f0\u660e\u534f\u8bae\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"protocol ExampleProtocol {\n     var simpleDescription: String { get }\n     mutating func adjust()\n}\n")),(0,a.kt)("p",null,"\u7c7b\u3001\u679a\u4e3e\u548c\u7ed3\u6784\u90fd\u53ef\u4ee5\u91c7\u7528\u534f\u8bae\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'class SimpleClass: ExampleProtocol {\n     var simpleDescription: String = "A very simple class."\n     var anotherProperty: Int = 69105\n     func adjust() {\n          simpleDescription += "  Now 100% adjusted."\n     }\n}\nvar a = SimpleClass()\na.adjust()\nlet aDescription = a.simpleDescription\n// Values "A very simple class.  Now 100% adjusted."\n\nstruct SimpleStructure: ExampleProtocol {\n     var simpleDescription: String = "A simple structure"\n     mutating func adjust() {\n          simpleDescription += " (adjusted)"\n     }\n}\nvar b = SimpleStructure()\nb.adjust()\nlet bDescription = b.simpleDescription\n// Values "A simple structure (adjusted)"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u5c06\u53e6\u4e00\u4e2a\u8981\u6c42\uff08requirement\uff09\u6dfb\u52a0\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleProtocol"),"\u3002\u4f60\u9700\u8981\u5bf9 ",(0,a.kt)("inlineCode",{parentName:"p"},"SimpleClass")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"SimpleStructure")," \u8fdb\u884c\u54ea\u4e9b\u66f4\u6539\u624d\u80fd\u4f7f\u5b83\u4eec\u4ecd\u7b26\u5408\u534f\u8bae\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'protocol ExampleProtocol {\n    var simpleDescription: String { get }\n\n    // highlight-next-line\n    func simpleDescriptionWith(num: Int) -> String\n\n    mutating func adjust()\n}\n\nclass SimpleClass: ExampleProtocol {\n    var simpleDescription: String = "A very simple class."\n    var anotherProperty: Int = 69105\n\n    // highlight-start\n    func simpleDescriptionWith(num: Int) -> String {\n        return "\\(simpleDescription) with \\(num)"\n    }\n    // highlight-end\n\n    func adjust() {\n        simpleDescription += "  Now 100% adjusted."\n    }\n}\n\nstruct SimpleStructure: ExampleProtocol {\n    var simpleDescription: String = "A simple structure"\n\n    // highlight-start\n    func simpleDescriptionWith(num: Int) -> String {\n        return "\\(simpleDescription) with \\(num)"\n    }\n    // highlight-end\n\n    mutating func adjust() {\n        simpleDescription += " (adjusted)"\n    }\n}\n'))),(0,a.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"SimpleStructure")," \u7684\u58f0\u660e\u4e2d\u4f7f\u7528\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"mutating"),' \u5173\u952e\u5b57\u6765\u6807\u8bb0 "\u53ef\u4ee5\u4fee\u6539\u7ed3\u6784\u4f53" \u7684\u65b9\u6cd5\u3002\u4f46\u5728 ',(0,a.kt)("inlineCode",{parentName:"p"},"SimpleClass")," \u7684\u58f0\u660e\u4e2d\u4e0d\u9700\u8981\u5c06\u5176\u4efb\u4f55\u65b9\u6cd5\u6807\u8bb0\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"mutaging"),"\uff0c\u662f\u56e0\u4e3a",(0,a.kt)("strong",{parentName:"p"},"\u7c7b\u4e0a\u7684\u65b9\u6cd5\u59cb\u7ec8\u53ef\u4ee5\u4fee\u6539\u8be5\u7c7b"),"\u3002"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"extension")," \u5411\u73b0\u6709\u7c7b\u578b\u6dfb\u52a0\u529f\u80fd\uff0c\u6bd4\u5982\u300c\u65b0\u65b9\u6cd5\u300d\u548c\u300c\u8ba1\u7b97\u5c5e\u6027\u300d\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u5c06\u534f\u8bae\u4e00\u81f4\u6027\uff08protocol conformance \uff09\u6dfb\u52a0\u7ed9\u5728\u522b\u5904\u58f0\u660e\u7684\u7c7b\u578b\uff0c\u751a\u81f3\u6dfb\u52a0\u7ed9\u4f60\u4ece\u300c\u5e93\uff08library\uff09\u300d\u6216\u300c\u6846\u67b6\uff08framework\uff09\u300d\u5bfc\u5165\u7684\u7c7b\u578b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'extension Int: ExampleProtocol {\n    var simpleDescription: String {\n        return "The number \\(self)"\n    }\n    mutating func adjust() {\n        self += 42\n    }\n }\nprint(7.simpleDescription)\n\n// console-next-line\n// Prints "The number 7"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Double")," \u7c7b\u578b\u7f16\u5199\u6269\u5c55\uff0c\u6dfb\u52a0\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"absoluteValue")," \u5c5e\u6027\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'extension Double {\n    var absoluteValue: Double {\n        return abs(self)\n    }\n}\n\nlet v1: Double = 1.2\nprint(v1.absoluteValue)\n// Prints "1.2"\n\nlet v2: Double = -3.14\nprint(v2.absoluteValue)\n// Prints "3.14"\n'))),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u547d\u540d\u7c7b\u578b\u4e00\u6837\u4f7f\u7528\u534f\u8bae\u540d\u79f0 - \u4f8b\u5982\uff0c\u521b\u5efa\u5177\u6709\u4e0d\u540c\u7c7b\u578b\u4f46\u90fd\u7b26\u5408\u5355\u4e00\u534f\u8bae\u7684\u5bf9\u8c61\u96c6\u5408\u3002\u5f53\u4f60\u4f7f\u7528\u7c7b\u578b\u4e3a\u534f\u8bae\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u534f\u8bae\u5b9a\u4e49\u4e4b\u5916\u7684\u65b9\u6cd5\u4e0d\u53ef\u7528\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let protocolValue: any ExampleProtocol = a\nprint(protocolValue.simpleDescription)\n// Prints \"A very simple class.  Now 100% adjusted.\"\n\n\nprint(protocolValue.anotherProperty)\n// error-next-line\n// error: value of type 'any ExampleProtocol' has no member 'anotherProperty'\n")),(0,a.kt)("p",null,"\u5373\u4f7f\u53d8\u91cf ",(0,a.kt)("inlineCode",{parentName:"p"},"protocolValue")," \u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"SimpleClass"),"\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u5c06\u5176\u89c6\u4e3a\u7ed9\u5b9a\u7c7b\u578b ",(0,a.kt)("inlineCode",{parentName:"p"},"ExampleProtocol"),"\u3002\u8fd9\u610f\u5473\u7740\u9664\u4e86\u534f\u8bae\u4e00\u81f4\u6027\u4e4b\u5916\uff0c\u4f60\u8fd8\u4e0d\u80fd\u610f\u5916\u8bbf\u95ee\u7c7b\u5b9e\u73b0\u7684\u65b9\u6cd5\u6216\u5c5e\u6027\u3002"),(0,a.kt)("h2",{id:"\u9519\u8bef\u5904\u7406"},"\u9519\u8bef\u5904\u7406"),(0,a.kt)("p",null,"\u4f7f\u7528\u7b26\u5408 ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," \u534f\u8bae\u7684\u4efb\u4f55\u7c7b\u578b\u6765\u8868\u793a\uff08represent\uff09\u9519\u8bef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"enum PrinterError: Error {\n    case outOfPaper\n    case noToner\n    case onFire\n}\n")),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"throw")," \u629b\u51fa\u9519\u8bef\uff0c\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"throws")," \u6807\u8bb0\u53ef\u4ee5\u629b\u51fa\u9519\u8bef\u7684\u51fd\u6570\u3002\u5982\u679c\u4f60\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u629b\u51fa\u9519\u8bef\uff0c\u8be5\u51fd\u6570\u4f1a\u7acb\u5373\u8fd4\u56de\uff0c\u4e14\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4ee3\u7801\u4f1a\u5904\u7406\u8be5\u9519\u8bef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func send(job: Int, toPrinter printerName: String) throws -> String {\n    if printerName == "Never Has Toner" {\n        throw PrinterError.noToner\n    }\n    return "Job sent"\n}\n')),(0,a.kt)("p",null,"\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u9519\u8bef\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"do-catch"),"\u3002\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"do")," \u4ee3\u7801\u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u4ee3\u7801\u524d\u9762\u5199 ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," \u6765\u6807\u8bb0\u53ef\u80fd\u629b\u51fa\u9519\u8bef\u7684\u4ee3\u7801\u3002\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," \u4ee3\u7801\u5757\u5185\uff0c\u9519\u8bef\u4f1a\u81ea\u52a8\u547d\u540d\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," \uff0c\u9664\u975e\u4f60\u4e3a\u5176\u6307\u5b9a\u5176\u5b83\u540d\u79f0\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'do {\n    let printerResponse = try send(job: 1040, toPrinter: "Bi Sheng")\n    print(printerResponse)\n} catch {\n    print(error)\n}\n\n// console-next-line\n// Prints "Job sent"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,'\u5c06\u6253\u5370\u673a\u540d\u79f0\u66f4\u6539\u4e3a "Never Has Toner"\uff0c\u4ee5\u4fbf ',(0,a.kt)("inlineCode",{parentName:"p"},"send(job:toPrinter:)")," \u51fd\u6570\u629b\u51fa\u9519\u8bef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// toner [\u02c8to\u028an\u0259r] - n.\uff08\u6253\u5370\u673a\u3001\u590d\u5370\u673a\u7b49\u7528\u7684\uff09\u58a8\u7c89\uff0c\u8272\u7c89\uff1b\n\ndo {\n    // highlight-next-line\n    let printerResponse = try send(job: 1040, toPrinter: "Never Has Toner")\n    print(printerResponse)\n} catch {\n    print(error)\n}\n\n// console-next-line\n// Prints "noToner"\n'))),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u63d0\u4f9b\u591a\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," \u4ee3\u7801\u5757\u6765\u5904\u7406\u7279\u5b9a\u9519\u8bef\u3002\u60a8\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," \u4e4b\u540e\u7f16\u5199 pattern\uff0c\u5c31\u50cf\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," \u4e2d\u7684 case \u4e4b\u540e\u7f16\u5199 pattern \u4e00\u6837\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'do {\n    let printerResponse = try send(job: 1440, toPrinter: "Gutenberg")\n    print(printerResponse)\n} catch PrinterError.onFire {\n    print("I\'ll just put this over here, with the rest of the fire.")\n} catch let printerError as PrinterError {\n    print("Printer error: \\(printerError).")\n} catch {\n    print(error)\n}\n\n// console-next-line\n// Prints "Job sent"\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u6dfb\u52a0\u4ee3\u7801\u4ee5\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"do")," \u4ee3\u7801\u5757\u5185\u5f15\u53d1\u9519\u8bef\u3002\u4f60\u9700\u8981\u629b\u51fa\u4ec0\u4e48\u6837\u7684\u9519\u8bef\u624d\u80fd\u8ba9\u7b2c\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," \u4ee3\u7801\u5757\u5904\u7406\u9519\u8bef\uff1f\u7b2c\u4e8c\u5757\u548c\u7b2c\u4e09\u5757\u5462\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// \u8ba9\u7b2c\u4e00\u5757\u5904\u7406\n\nfunc send(job: Int, toPrinter printerName: String) throws -> String {\n    if printerName == "Never Has Toner" {\n        throw PrinterError.noToner\n    }\n    // highlight-start\n    if printerName == "Gutenberg" {\n        throw PrinterError.onFire\n    }\n    // highlight-end\n    return "Job sent"\n}\n\n// console-next-line\n// Prints "I\'ll just put this over here, with the rest of the fire."\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// \u8ba9\u7b2c\u4e8c\u5757\u5904\u7406\n\nfunc send(job: Int, toPrinter printerName: String) throws -> String {\n    if printerName == "Never Has Toner" {\n        throw PrinterError.noToner\n    }\n    // highlight-start\n    if printerName == "Gutenberg" {\n        throw PrinterError.outOfPaper\n    }\n    // highlight-end\n    return "Job sent"\n}\n\n// console-next-line\n// Prints "Printer error: outOfPaper."\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// \u8ba9\u7b2c\u4e09\u5757\u5904\u7406\n\n// highlight-start\nenum NotPrinterError: Error {\n    case message(String)\n}\n// highlight-end\n\nfunc send(job: Int, toPrinter printerName: String) throws -> String {\n    if printerName == "Never Has Toner" {\n        throw PrinterError.noToner\n    }\n    // highlight-start\n    if printerName == "Gutenberg" {\n        throw NotPrinterError.message("I am not a PrinterError")\n    }\n    // highlight-end\n    return "Job sent"\n}\n\n// console-next-line\n// Prints "message("I am not a PrinterError")"\n'))),(0,a.kt)("p",null,"\u5904\u7406\u9519\u8bef\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"try?")," \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u53ef\u9009\u7684\u3002\u5982\u679c\u51fd\u6570\u629b\u51fa\u9519\u8bef\uff0c\u5219\u4e22\u5f03\u8be5\u9519\u8bef\uff0c\u5e76\u4e14\u7ed3\u679c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"\u3002\u5426\u5219\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u8fd4\u56de\u503c\u7684\u53ef\u9009\u503c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let printerSuccess = try? send(job: 1884, toPrinter: "Mergenthaler")\nlet printerFailure = try? send(job: 1885, toPrinter: "Never Has Toner")\n\n// tip-next-line\n// The type of `printerSuccess` and `printerFailure` both are `String?`\n')),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"defer")," \u7f16\u5199\u5728\u51fd\u6570\u4e2d\u6240\u6709\u5176\u5b83\u4ee3\u7801\u4e4b\u540e\u3001\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u6267\u884c\u7684\u4ee3\u7801\u5757\u3002\u65e0\u8bba\u51fd\u6570\u662f\u5426\u629b\u51fa\u9519\u8bef\uff0c\u5176\u4e2d\u7684\u4ee3\u7801\u90fd\u4f1a\u6267\u884c\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"defer"),' \u5c06 "\u8bbe\u7f6e\u4ee3\u7801" \u548c "\u6e05\u7406\u4ee3\u7801" \u5199\u5728\u4e00\u8d77\uff0c\u5373\u4f7f\u5b83\u4eec\u9700\u8981\u5728\u4e0d\u540c\u65f6\u95f4\u6267\u884c\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var fridgeIsOpen = false\nlet fridgeContent = ["milk", "eggs", "leftovers"]\n\nfunc fridgeContains(_ food: String) -> Bool {\n    fridgeIsOpen = true\n    defer {\n        fridgeIsOpen = false\n    }\n\n    let result = fridgeContent.contains(food)\n    return result\n}\nfridgeContains("banana")\nprint(fridgeIsOpen)\n\n// console-next-line\n// Prints "false"\n')),(0,a.kt)("h2",{id:"\u6cdb\u578b"},"\u6cdb\u578b"),(0,a.kt)("p",null,"\u5728\u5c16\u62ec\u53f7\u5185\u5199\u4e00\u4e2a\u540d\u79f0\uff0c\u4ee5\u521b\u5efa\u6cdb\u578b\u51fd\u6570\u6216\u7c7b\u578b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func makeArray<Item>(repeating item: Item, numberOfTimes: Int) -> [Item] {\n    var result: [Item] = []\n    for _ in 0..<numberOfTimes {\n         result.append(item)\n    }\n    return result\n}\nmakeArray(repeating: "knock", numberOfTimes: 4)\n\n// tip-next-line\n// Finals "["knock", "knock", "knock", "knock"]"\n')),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u521b\u5efa\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u6cdb\u578b\u5f62\u5f0f\uff08forms\uff09\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u7c7b\u3001\u679a\u4e3e\u548c\u7ed3\u6784\u4f53\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'// Reimplement the Swift standard library\'s optional type\n\nenum OptionalValue<Wrapped> {\n    case none\n    case some(Wrapped)\n}\nvar possibleInteger: OptionalValue<Int> = .none\npossibleInteger = .some(100)\n\n// highlight-start\nswitch possibleInteger {\ncase let .some(num):\n    print(num + 1)\ndefault:\n    print("none")\n}\n\n// Prints "101"\n// highlight-end\n')),(0,a.kt)("p",null,"\u5728\u65b9\u6cd5\u4f53\u4e4b\u524d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"where")," \u6765\u6307\u5b9a\u4e00\u4e9b\u8981\u6c42\u3002\u4f8b\u5982\uff0c\u8981\u6c42\u8be5\u7c7b\u578b\u5b9e\u73b0\u534f\u8bae\u3001\u8981\u6c42\u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u3001\u6216\u8981\u6c42\u4e00\u4e2a\u7c7b\u5177\u6709\u7279\u5b9a\u7684\u8d85\u7c7b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool\n    where T.Element: Equatable, T.Element == U.Element\n{\n    for lhsItem in lhs {\n        for rhsItem in rhs {\n            if lhsItem == rhsItem {\n                return true\n            }\n        }\n    }\n   return false\n}\nanyCommonElements([1, 2, 3], [3])\n\n// tip-next-line\n// Finals "true"\n\n// \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u5bf9\u6cdb\u578b T \u548c U \u4f5c\u4e86\u4ee5\u4e0b\u8981\u6c42\uff1a\n// - T \u548c U \u90fd\u8981\u7b26\u5408 Sequence \u534f\u8bae\n// - T \u7684 Element \u8981\u7b26\u5408 Equatable \u534f\u8bae\n// - T \u548c U \u7684 Element \u7c7b\u578b\u76f8\u540c\n')),(0,a.kt)(m,{mdxType:"ExperimentBlock"},(0,a.kt)("p",null,"\u4fee\u6539 ",(0,a.kt)("inlineCode",{parentName:"p"},"anyCommonElements(_:_:)"),' \u51fd\u6570\u4ee5\u521b\u5efa\u4e00\u4e2a "\u8fd4\u56de\u4efb\u610f\u4e24\u4e2a\u5e8f\u5217\u5171\u6709\u5143\u7d20\u7684\u6570\u7ec4\u7684" \u51fd\u6570\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> [T.Element]\n    where T.Element: Equatable, T.Element == U.Element\n{\n    var sameItems: [T.Element] = []\n    for lhsItem in lhs {\n        for rhsItem in rhs {\n            if lhsItem == rhsItem {\n                sameItems.append(lhsItem)\n            }\n        }\n    }\n    return sameItems\n}\n\nanyCommonElements([1, 2, 3], [2, 3, 4])\n\n// tip-next-line\n// Finals "[2, 3]"\n'))),(0,a.kt)("p",null,"\u4e66\u5199\u65b9\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"<T: Equatable>")," \u4e0e\u4e66\u5199\u65b9\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"<T> ... where T: Equatable")," \u662f\u76f8\u540c\u7684\u3002"))}g.isMDXComponent=!0}}]);